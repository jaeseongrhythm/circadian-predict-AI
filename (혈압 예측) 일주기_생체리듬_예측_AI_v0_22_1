{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jaeseongrhythm/circadian-predict-AI/blob/main/(%ED%98%88%EC%95%95%20%EC%98%88%EC%B8%A1)%20%EC%9D%BC%EC%A3%BC%EA%B8%B0_%EC%83%9D%EC%B2%B4%EB%A6%AC%EB%93%AC_%EC%98%88%EC%B8%A1_AI_v0_22_1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FOOb3A-3IIp9",
        "outputId": "d36585ca-4870-4bdd-c99c-322cac38b318"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"\n",
        "실시간 혈압 예측 AI\n",
        "  ㄴ 일주기 생체리듬 예측 AI v0.22.1\n",
        "\n",
        "[모델 설명]\n",
        "- 미래 활동 계획을 입력으로 받아 향후 24 시간의 혈압 예측\n",
        "- 특정 이벤트가 혈압에 미치는 영향 정량 평가 가능(시뮬레이션).\n",
        "\n",
        "[v0.22.1 주요 변경사항]:\n",
        "- 인코더-디코더 구조 강화\n",
        "- 전처리 단계에서 모든 LCO 궤적 생성 -> 학습 속도 향상\n",
        "- 모든 시점(t)에서 예측 가능\n",
        "\n",
        "[폴더 구조]\n",
        "|project_root\n",
        "|--biometirc_data\n",
        "|  |--person_1\n",
        "|  |  |--biometric_data_person_1.csv\n",
        "|  |  |--biometric_data_person_1_baseline.csv\n",
        "|  |  |--activity_plans_person_1.csv\n",
        "|  |--...\n",
        "|--baseline_prediction_ai.py\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "# =============================================================================\n",
        "# 0. 라이브러리 임포트 및 파이프라인 설정\n",
        "# =============================================================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.integrate import solve_ivp\n",
        "from scipy.interpolate import interp1d\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.layers import Input, Conv1D, Concatenate, Dense, Dropout, LayerNormalization, MultiHeadAttention, GlobalAveragePooling1D, LSTM, Reshape\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras import mixed_precision\n",
        "import os\n",
        "import warnings\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.dates as mdates\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import joblib\n",
        "from tqdm import tqdm\n",
        "import argparse\n",
        "import random\n",
        "import math\n",
        "import bisect\n",
        "from datetime import datetime, timedelta\n",
        "import pickle\n",
        "\n",
        "warnings.filterwarnings(\"ignore\", category=UserWarning)\n",
        "warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n",
        "\n",
        "# [OPTIMIZATION] 혼합 정밀도 정책 설정\n",
        "mixed_precision.set_global_policy('mixed_float16')\n",
        "\n",
        "# --- 파이프라인 제어 설정 ---\n",
        "OUTPUT_DIR = \"/content/drive/MyDrive/real_time_bp_prediction_output_v0.22.1\"\n",
        "ROOT_DATA_DIR = \"/content/drive/MyDrive/biometric_data\"\n",
        "\n",
        "# --- 데이터 및 모델 설정 ---\n",
        "INPUT_SEQUENCE_LENGTH = 5 * 24 * 60\n",
        "PREDICTION_HORIZON = 24 * 60\n",
        "NUM_BP_FEATURES = 2  # systolic, diastolic\n",
        "PHASE_CORRECTION_LOOKBACK_DAYS = 2\n",
        "DAY_MINUTES = 24 * 60\n",
        "NUM_MARKERS_TO_KEEP = 3\n",
        "\n",
        "TRAIN_RATIO = 0.8\n",
        "VALIDATION_RATIO = 0.1\n",
        "\n",
        "# --- 모델 하이퍼파라미터 ---\n",
        "D_MODEL = 128\n",
        "NUM_LAYERS = 2\n",
        "NUM_HEADS = 8\n",
        "DFF = 256\n",
        "DROPOUT_RATE = 0.05\n",
        "NUM_FOURIER_HARMONICS = 5\n",
        "LSTM_UNITS = 64\n",
        "DECODER_LSTM_UNITS = 128\n",
        "\n",
        "# --- 학습 하이퍼파라미터 ---\n",
        "EPOCHS = 2\n",
        "BATCH_SIZE = 8\n",
        "LEARNING_RATE = 0.0005\n",
        "LAMBDA_REG = 0.1\n",
        "LAMBDA_CONT = 10.0\n",
        "LAMBDA_ANCHOR = 5.0\n",
        "LAMBDA_BOUNDARY = 20.0  # D-1과 D-day 경계 연속성\n",
        "\n",
        "# --- 물리 모델 파라미터 ---\n",
        "PARAMS = {\n",
        "    'mu': 0.13, 'q': 1/3, 'k': 0.55, 'alpha0': 0.1, 'I0': 9500,\n",
        "    'p': 0.5, 'beta': 0.007, 'G': 37, 'rho': 0.032, 'tau_x': 24.2,\n",
        "}\n",
        "\n",
        "# =============================================================================\n",
        "# 1. 생체리듬 물리 모델 (기존 코드와 동일)\n",
        "# =============================================================================\n",
        "def find_hr_nadir(heart_rate_data, is_sleeping_data, day_minutes=1440):\n",
        "    num_days = len(heart_rate_data) // day_minutes\n",
        "    daily_nadirs = []\n",
        "    for day in range(num_days):\n",
        "        day_start, day_end = day * day_minutes, (day + 1) * day_minutes\n",
        "        day_hr, day_sleep = heart_rate_data[day_start:day_end], is_sleeping_data[day_start:day_end]\n",
        "        sleep_hr = day_hr[day_sleep == 1]\n",
        "        if len(sleep_hr) > 0:\n",
        "            original_indices = np.where(day_sleep == 1)[0]\n",
        "            daily_nadirs.append(original_indices[np.argmin(sleep_hr)])\n",
        "        else:\n",
        "            daily_nadirs.append(np.argmin(day_hr))\n",
        "    return np.mean(daily_nadirs) if daily_nadirs else day_minutes / 2\n",
        "\n",
        "def _sigmoid(x, k=2, x0=0):\n",
        "    return 1 / (1 + np.exp(-k * (x - x0)))\n",
        "\n",
        "def lco_model_ode(t, y, params, light_func, sleep_func):\n",
        "    x, xc, n = y\n",
        "    if not np.all(np.isfinite(y)): return [0,0,0]\n",
        "\n",
        "    mu, q, k, alpha0, I0, p, beta, G, rho, tau_x = params.values()\n",
        "    I, sigma = light_func(t), sleep_func(t)\n",
        "    I = max(I, 0)\n",
        "    alpha = alpha0 * ((I / I0)**p) * (I / (I + 100.0)) if I > 0 else 0\n",
        "    B_hat = G * (1 - n) * alpha\n",
        "    B = B_hat * (1 - 0.4 * x) * (1 - 0.4 * xc)\n",
        "\n",
        "    cbt_min_phase_angle = -170.7 * np.pi / 180.0\n",
        "    current_phase = np.arctan2(xc, x)\n",
        "    phase_diff_rad = (current_phase - cbt_min_phase_angle + np.pi) % (2 * np.pi) - np.pi\n",
        "    psi_c_x = phase_diff_rad * (tau_x / (2 * np.pi)) + (tau_x / 2)\n",
        "    weight_enter = _sigmoid(psi_c_x, k=2, x0=16.5)\n",
        "    weight_exit = 1 - _sigmoid(psi_c_x, k=2, x0=21.0)\n",
        "    wmz_weight = weight_enter * weight_exit * sigma\n",
        "    Ns_hat_normal = rho * (1/3.0 - sigma)\n",
        "    Ns_hat_wmz = rho * (1/3.0)\n",
        "    Ns_hat = Ns_hat_normal * (1 - wmz_weight) + Ns_hat_wmz * wmz_weight\n",
        "    Ns = Ns_hat * (1 - np.tanh(10 * x))\n",
        "\n",
        "    dxdt = (np.pi / 12.0) * (xc + mu * (x/3.0 + (4.0/3.0)*x**3 - (256.0/105.0)*x**7) + B + Ns)\n",
        "    tau_term_sq = (24.0 / (0.99729 * tau_x))**2\n",
        "    dxc_dt = (np.pi / 12.0) * (q * B * xc - x * (tau_term_sq + k * B))\n",
        "    dn_dt = 60.0 * (alpha * (1 - n) - beta * n)\n",
        "    return [dxdt, dxc_dt, dn_dt]\n",
        "\n",
        "def lco_model_jacobian(t, y, params, light_func, sleep_func):\n",
        "    x, xc, n = y\n",
        "    if not np.all(np.isfinite(y)): return np.zeros((3,3))\n",
        "\n",
        "    mu, q, k, alpha0, I0, p, beta, G, rho, tau_x = params.values()\n",
        "    I, sigma = light_func(t), sleep_func(t)\n",
        "    I = max(I, 0)\n",
        "    alpha = alpha0 * ((I / I0)**p) * (I / (I + 100.0)) if I > 0 else 0\n",
        "    cbt_min_phase_angle = -170.7 * np.pi / 180.0\n",
        "    current_phase = np.arctan2(xc, x)\n",
        "    phase_diff_rad = (current_phase - cbt_min_phase_angle + np.pi) % (2 * np.pi) - np.pi\n",
        "    psi_c_x = phase_diff_rad * (tau_x / (2 * np.pi)) + (tau_x / 2)\n",
        "    weight_enter = _sigmoid(psi_c_x, k=2, x0=16.5)\n",
        "    weight_exit = 1 - _sigmoid(psi_c_x, k=2, x0=21.0)\n",
        "    wmz_weight = weight_enter * weight_exit * sigma\n",
        "    Ns_hat_normal = rho * (1/3.0 - sigma)\n",
        "    Ns_hat_wmz = rho * (1/3.0)\n",
        "    Ns_hat = Ns_hat_normal * (1 - wmz_weight) + Ns_hat_wmz * wmz_weight\n",
        "    dB_dx = -0.4 * G * alpha * (1 - n) * (1 - 0.4 * xc)\n",
        "    dB_dxc = -0.4 * G * alpha * (1 - n) * (1 - 0.4 * x)\n",
        "    dB_dn = -G * alpha * (1 - 0.4 * x) * (1 - 0.4 * xc)\n",
        "    dNs_dx = -Ns_hat * 10.0 * (1.0 / np.cosh(10 * x))**2\n",
        "    J = np.zeros((3, 3))\n",
        "    J[0, 0] = (np.pi / 12.0) * (mu * (1/3.0 + 4.0 * x**2 - (256.0*7.0/105.0) * x**6) + dB_dx + dNs_dx)\n",
        "    J[0, 1] = (np.pi / 12.0) * (1.0 + dB_dxc)\n",
        "    J[0, 2] = (np.pi / 12.0) * dB_dn\n",
        "    B = G * alpha * (1 - n) * (1 - 0.4 * x) * (1 - 0.4 * xc)\n",
        "    tau_term_sq = (24.0 / (0.99729 * tau_x))**2\n",
        "    J[1, 0] = (np.pi / 12.0) * (q * xc * dB_dx - (tau_term_sq + k * B) - k * x * dB_dx)\n",
        "    J[1, 1] = (np.pi / 12.0) * (q * B + q * xc * dB_dxc - k * x * dB_dxc)\n",
        "    J[1, 2] = (np.pi / 12.0) * (q * xc * dB_dn - k * x * dB_dn)\n",
        "    J[2, 2] = 60.0 * (-alpha - beta)\n",
        "    return J\n",
        "\n",
        "# =============================================================================\n",
        "# 2. 데이터 로딩 및 미래 활동 계획\n",
        "# =============================================================================\n",
        "def load_all_biometric_data_with_bp(root_dir=ROOT_DATA_DIR):\n",
        "    \"\"\"혈압 데이터가 포함된 모든 person의 데이터를 통합하여 로드\"\"\"\n",
        "    print(f\"--- 다중 사용자 데이터 로딩 시작 (혈압 필수): {root_dir} ---\")\n",
        "    all_data = []\n",
        "    person_ids = []\n",
        "\n",
        "    if not os.path.exists(root_dir):\n",
        "        print(f\"데이터 디렉토리를 찾을 수 없습니다: {root_dir}. 임의의 데이터를 생성합니다.\")\n",
        "        # 임의 데이터 생성 로직 추가\n",
        "        num_persons = 3\n",
        "        num_days = 10\n",
        "        for person_id in range(1, num_persons + 1):\n",
        "            person_folder = os.path.join(root_dir, f\"person_{person_id}\")\n",
        "            os.makedirs(person_folder, exist_ok=True)\n",
        "\n",
        "            timestamps = pd.to_datetime(pd.date_range(start='2023-01-01', periods=num_days * DAY_MINUTES, freq='T'))\n",
        "            df = pd.DataFrame({'timestamp': timestamps})\n",
        "            df['person_id'] = person_id\n",
        "            df['lux'] = np.sin(np.linspace(0, num_days * 2 * np.pi, len(df))) * 500 + 550\n",
        "            df['is_sleeping'] = (df['timestamp'].dt.hour >= 23) | (df['timestamp'].dt.hour < 7)\n",
        "            df['heart_rate'] = 65 - 10 * df['is_sleeping'] + np.random.randn(len(df)) * 2\n",
        "            df['hrv'] = 40 + 15 * df['is_sleeping'] + np.random.randn(len(df)) * 3\n",
        "            df['respiration_rate'] = 16 - 4 * df['is_sleeping'] + np.random.randn(len(df))\n",
        "            df['skin_temp'] = 34 - 0.5 * df['is_sleeping'] + np.random.randn(len(df)) * 0.1\n",
        "            df['ambient_temp'] = 22 + np.random.randn(len(df)) * 0.5\n",
        "            df['meal_event'] = ((df['timestamp'].dt.hour.isin([8, 12, 18])) & (df['timestamp'].dt.minute < 30)).astype(int)\n",
        "            df['exercise_event'] = ((df['timestamp'].dt.hour == 17) & (df['timestamp'].dt.minute < 45)).astype(int)\n",
        "            df['systolic_bp'] = 120 - 15 * df['is_sleeping'] + np.sin(np.linspace(0, num_days * 2 * np.pi, len(df))) * 5 + np.random.randn(len(df)) * 3\n",
        "            df['diastolic_bp'] = 80 - 10 * df['is_sleeping'] + np.sin(np.linspace(0, num_days * 2 * np.pi, len(df))) * 3 + np.random.randn(len(df)) * 2\n",
        "\n",
        "            csv_path = os.path.join(person_folder, f\"biometric_data_person_{person_id}.csv\")\n",
        "            df.to_csv(csv_path, index=False)\n",
        "            print(f\"  - 임의 데이터 생성: Person {person_id}\")\n",
        "\n",
        "    for person_folder in sorted(os.listdir(root_dir)):\n",
        "        if person_folder.startswith(\"person_\"):\n",
        "            person_id_str = person_folder.split(\"_\")[1]\n",
        "            if not person_id_str.isdigit(): continue\n",
        "            person_id = int(person_id_str)\n",
        "\n",
        "            csv_path = os.path.join(root_dir, person_folder, f\"biometric_data_{person_folder}.csv\")\n",
        "            if not os.path.exists(csv_path):\n",
        "                csv_path = os.path.join(root_dir, person_folder, f\"biometric_data_person_{person_id}.csv\")\n",
        "\n",
        "\n",
        "            if os.path.exists(csv_path):\n",
        "                df = pd.read_csv(csv_path)\n",
        "                df['timestamp'] = pd.to_datetime(df['timestamp'])\n",
        "\n",
        "                if 'systolic_bp' not in df.columns or 'diastolic_bp' not in df.columns:\n",
        "                    print(f\"경고: Person {person_id}의 혈압 데이터가 없습니다. 건너뜁니다.\")\n",
        "                    continue\n",
        "\n",
        "                # 필수 컬럼 결측치 채우기\n",
        "                required_cols = ['systolic_bp', 'diastolic_bp', 'heart_rate', 'is_sleeping', 'lux']\n",
        "                for col in required_cols:\n",
        "                    if df[col].isnull().any():\n",
        "                        df[col] = df[col].interpolate(method='time').fillna(method='bfill').fillna(method='ffill')\n",
        "\n",
        "                if df[required_cols].isnull().any().any():\n",
        "                    print(f\"경고: Person {person_id}의 필수 데이터에 여전히 결측값이 있습니다. 건너뜁니다.\")\n",
        "                    continue\n",
        "\n",
        "                df['person_id'] = person_id\n",
        "                all_data.append(df)\n",
        "                person_ids.append(person_id)\n",
        "                print(f\"  - Person {person_id}: {len(df)} 레코드 로드 (혈압 데이터 포함)\")\n",
        "\n",
        "    if not all_data:\n",
        "        raise ValueError(\"로드할 유효한 데이터가 없습니다. 'biometric_data' 폴더를 확인해주세요.\")\n",
        "\n",
        "    combined_df = pd.concat(all_data, ignore_index=True)\n",
        "    print(f\"--- 총 {len(person_ids)}명의 데이터 통합 완료: {len(combined_df)} 레코드 ---\")\n",
        "\n",
        "    return combined_df, sorted(list(set(person_ids)))\n",
        "\n",
        "def load_future_activity_plans(root_dir=ROOT_DATA_DIR):\n",
        "    \"\"\"미래 활동 계획을 CSV에서 로드\"\"\"\n",
        "    print(\"--- 미래 활동 계획 데이터 로딩 ---\")\n",
        "    activity_plans = {}\n",
        "\n",
        "    for person_folder in sorted(os.listdir(root_dir)):\n",
        "        if person_folder.startswith(\"person_\"):\n",
        "            person_id_str = person_folder.split(\"_\")[1]\n",
        "            if not person_id_str.isdigit(): continue\n",
        "            person_id = int(person_id_str)\n",
        "\n",
        "            activity_path = os.path.join(root_dir, person_folder, f\"activity_plans_{person_folder}.csv\")\n",
        "            if not os.path.exists(activity_path):\n",
        "                 activity_path = os.path.join(root_dir, person_folder, f\"activity_plans_person_{person_id}.csv\")\n",
        "\n",
        "\n",
        "            if os.path.exists(activity_path):\n",
        "                activity_df = pd.read_csv(activity_path)\n",
        "                activity_df['timestamp'] = pd.to_datetime(activity_df['timestamp'])\n",
        "                activity_plans[person_id] = activity_df\n",
        "                print(f\"  - Person {person_id}: 활동 계획 로드 완료\")\n",
        "\n",
        "    return activity_plans\n",
        "\n",
        "def get_activity_plan_for_prediction(activity_plans, person_id, prediction_time, horizon_minutes=1440):\n",
        "    \"\"\"특정 시점의 미래 활동 계획 추출\"\"\"\n",
        "    if person_id not in activity_plans or activity_plans[person_id].empty:\n",
        "        return generate_default_activity_plan(prediction_time, horizon_minutes)\n",
        "\n",
        "    person_plan = activity_plans[person_id]\n",
        "    end_time = prediction_time + pd.Timedelta(minutes=horizon_minutes)\n",
        "    mask = (person_plan['timestamp'] >= prediction_time) & (person_plan['timestamp'] < end_time)\n",
        "    future_plan = person_plan.loc[mask]\n",
        "\n",
        "    if len(future_plan) < horizon_minutes:\n",
        "        # 데이터가 부족하면 기본값으로 채움\n",
        "        default_plan = generate_default_activity_plan(prediction_time, horizon_minutes)\n",
        "        if not future_plan.empty:\n",
        "            # 부분적으로 있는 계획은 유지\n",
        "            for col in ['sleep', 'meal', 'exercise']:\n",
        "                if col in future_plan.columns:\n",
        "                    default_plan[col][:len(future_plan)] = future_plan[col].values\n",
        "        return default_plan\n",
        "\n",
        "    activity_dict = {\n",
        "        'sleep': future_plan['sleep'].values[:horizon_minutes],\n",
        "        'meal': future_plan['meal'].values[:horizon_minutes],\n",
        "        'exercise': future_plan['exercise'].values[:horizon_minutes]\n",
        "    }\n",
        "    return activity_dict\n",
        "\n",
        "def generate_default_activity_plan(prediction_time, horizon_minutes=1440):\n",
        "    \"\"\"기본 활동 계획 생성 (활동 계획이 없을 때)\"\"\"\n",
        "    activity_plan = {\n",
        "        'sleep': np.zeros(horizon_minutes),\n",
        "        'meal': np.zeros(horizon_minutes),\n",
        "        'exercise': np.zeros(horizon_minutes)\n",
        "    }\n",
        "    timestamps = pd.to_datetime([prediction_time + timedelta(minutes=i) for i in range(horizon_minutes)])\n",
        "\n",
        "    for i, ts in enumerate(timestamps):\n",
        "        # 수면 (밤 11시 ~ 오전 7시)\n",
        "        if ts.hour >= 23 or ts.hour < 7:\n",
        "            activity_plan['sleep'][i] = 1.0\n",
        "        # 식사 (아침 7-8시, 점심 12-13시, 저녁 18-19시)\n",
        "        if (7 <= ts.hour < 8) or (12 <= ts.hour < 13) or (18 <= ts.hour < 19):\n",
        "             activity_plan['meal'][i] = 1.0\n",
        "        # 운동 (오후 5-6시)\n",
        "        if 17 <= ts.hour < 18:\n",
        "            activity_plan['exercise'][i] = 1.0\n",
        "\n",
        "    return activity_plan\n",
        "\n",
        "def estimate_future_light_from_activity(activity_plan, prediction_time):\n",
        "    \"\"\"활동 계획으로부터 미래 광 자극 추정\"\"\"\n",
        "    horizon_minutes = len(activity_plan['sleep'])\n",
        "    future_light = np.zeros(horizon_minutes)\n",
        "    timestamps = pd.to_datetime([prediction_time + timedelta(minutes=i) for i in range(horizon_minutes)])\n",
        "\n",
        "    for i, ts in enumerate(timestamps):\n",
        "        if activity_plan['sleep'][i] > 0.5:\n",
        "            future_light[i] = 0\n",
        "        elif activity_plan['exercise'][i] > 0.5:\n",
        "            future_light[i] = 5000 if 6 <= ts.hour < 20 else 200\n",
        "        elif activity_plan['meal'][i] > 0.5:\n",
        "            future_light[i] = 200\n",
        "        else:\n",
        "            future_light[i] = 300 if 6 <= ts.hour < 22 else 50\n",
        "\n",
        "    return future_light\n",
        "\n",
        "# =============================================================================\n",
        "# 3. 전처리: D-day 및 미래 LCO 궤적 생성\n",
        "# =============================================================================\n",
        "def generate_d_day_and_future_lco(person_data, prediction_idx, baseline_trajectory,\n",
        "                                 activity_plan, params, horizon_minutes=1440):\n",
        "    \"\"\"\n",
        "    D-day와 미래 LCO 궤적을 전처리 단계에서 생성\n",
        "    \"\"\"\n",
        "    prediction_time = person_data.iloc[prediction_idx]['timestamp']\n",
        "    prediction_minute_in_day = prediction_time.hour * 60 + prediction_time.minute\n",
        "    d_day_start_idx = prediction_idx - prediction_minute_in_day\n",
        "\n",
        "    if d_day_start_idx - 1 < 0:\n",
        "        raise ValueError(f\"Person {person_data.iloc[0]['person_id']}의 D-1 데이터가 부족합니다 (예측 인덱스: {prediction_idx}).\")\n",
        "\n",
        "    initial_state = baseline_trajectory[d_day_start_idx - 1, :]\n",
        "\n",
        "    total_future_minutes = prediction_minute_in_day + horizon_minutes\n",
        "    future_light = estimate_future_light_from_activity(activity_plan, prediction_time)\n",
        "\n",
        "    if prediction_minute_in_day > 0:\n",
        "        d_day_past_data = person_data.iloc[d_day_start_idx:prediction_idx]\n",
        "        past_light = d_day_past_data['integrated_lux'].values\n",
        "        past_sleep = d_day_past_data['is_sleeping'].values\n",
        "        total_light = np.concatenate([past_light, future_light])\n",
        "        total_sleep = np.concatenate([past_sleep, activity_plan['sleep']])\n",
        "    else:\n",
        "        total_light = future_light\n",
        "        total_sleep = activity_plan['sleep']\n",
        "\n",
        "    t_eval = np.arange(total_future_minutes) / 60.0\n",
        "    light_func = interp1d(t_eval, total_light, kind='linear', fill_value=\"extrapolate\")\n",
        "    sleep_func = interp1d(t_eval, total_sleep, kind='linear', fill_value=\"extrapolate\")\n",
        "\n",
        "    sol = solve_ivp(\n",
        "        fun=lco_model_ode, t_span=[0, total_future_minutes/60.0], y0=initial_state,\n",
        "        method='BDF', jac=lco_model_jacobian, args=(params, light_func, sleep_func),\n",
        "        t_eval=t_eval, rtol=1e-5, atol=1e-8\n",
        "    )\n",
        "\n",
        "    if not sol.success or sol.y.shape[1] != len(t_eval):\n",
        "        # print(f\"경고: D-day 및 미래 LCO 궤적 생성 실패. 이전 상태로 대체합니다.\")\n",
        "        future_trajectory = np.tile(initial_state, (total_future_minutes, 1))\n",
        "    else:\n",
        "        future_trajectory = sol.y.T\n",
        "\n",
        "    d_day_trajectory = future_trajectory[:prediction_minute_in_day, :]\n",
        "    future_lco_trajectory = future_trajectory[prediction_minute_in_day:, :2]\n",
        "\n",
        "    return d_day_trajectory, future_lco_trajectory\n",
        "\n",
        "# =============================================================================\n",
        "# 4. 딥러닝 모델 정의\n",
        "# =============================================================================\n",
        "@tf.keras.utils.register_keras_serializable()\n",
        "class FourierTrajectoryLayer(tf.keras.layers.Layer):\n",
        "    \"\"\"푸리에 보정 궤적 생성 레이어\"\"\"\n",
        "    def __init__(self, num_harmonics, **kwargs):\n",
        "        super(FourierTrajectoryLayer, self).__init__(**kwargs)\n",
        "        self.num_harmonics = num_harmonics\n",
        "        self.output_dim = DAY_MINUTES\n",
        "        self.t = tf.constant(np.linspace(0.0, 2 * np.pi, self.output_dim), dtype=tf.float32)\n",
        "\n",
        "    def call(self, correction_params):\n",
        "        original_dtype = correction_params.dtype\n",
        "        correction_params_f32 = tf.cast(correction_params, tf.float32)\n",
        "\n",
        "        num_coeffs_per_traj = 1 + 2 * self.num_harmonics\n",
        "        num_total_coeffs = num_coeffs_per_traj * 2\n",
        "        coeffs = correction_params_f32[:, :num_total_coeffs]\n",
        "        endpoints = correction_params_f32[:, num_total_coeffs:]\n",
        "\n",
        "        coeffs_x = coeffs[:, :num_coeffs_per_traj]\n",
        "        coeffs_xc = coeffs[:, num_coeffs_per_traj:]\n",
        "        endpoints_x = endpoints[:, 0:2]\n",
        "        endpoints_xc = endpoints[:, 2:4]\n",
        "\n",
        "        traj_x = self._build_trajectory(coeffs_x, endpoints_x)\n",
        "        traj_xc = self._build_trajectory(coeffs_xc, endpoints_xc)\n",
        "\n",
        "        result = tf.stack([traj_x, traj_xc], axis=-1)\n",
        "        return tf.cast(result, original_dtype)\n",
        "\n",
        "    def _build_trajectory(self, coeffs, endpoints):\n",
        "        a0 = coeffs[:, 0:1]\n",
        "        a_n = coeffs[:, 1:self.num_harmonics + 1]\n",
        "        b_n = coeffs[:, self.num_harmonics + 1:]\n",
        "\n",
        "        trajectory = a0\n",
        "        for n in range(1, self.num_harmonics + 1):\n",
        "            trajectory += a_n[:, n-1:n] * tf.cos(n * self.t)\n",
        "            trajectory += b_n[:, n-1:n] * tf.sin(n * self.t)\n",
        "\n",
        "        raw_start = trajectory[:, 0:1]\n",
        "        raw_end = trajectory[:, -1:]\n",
        "        target_start = endpoints[:, 0:1]\n",
        "        target_end = endpoints[:, 1:2]\n",
        "\n",
        "        ramp = tf.linspace(0.0, 1.0, self.output_dim)\n",
        "        ramp = tf.expand_dims(ramp, 0)\n",
        "\n",
        "        linear_correction = raw_start + (raw_end - raw_start) * ramp\n",
        "        target_linear = target_start + (target_end - target_start) * ramp\n",
        "\n",
        "        adjusted_trajectory = trajectory - linear_correction + target_linear\n",
        "        return adjusted_trajectory\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super(FourierTrajectoryLayer, self).get_config()\n",
        "        config.update({\"num_harmonics\": self.num_harmonics})\n",
        "        return config\n",
        "\n",
        "def build_fourier_correction_model(lookback_minutes, num_harmonics, lstm_units):\n",
        "    \"\"\"푸리에 보정 계수 및 앵커 포인트를 예측하는 모델\"\"\"\n",
        "    num_coeffs_per_traj = 1 + 2 * num_harmonics\n",
        "    output_size = (num_coeffs_per_traj * 2) + 4 # x, xc에 대한 계수 + 각 시작/끝 앵커포인트\n",
        "\n",
        "    input_lux = Input(shape=(lookback_minutes, 1), name='corr_input_lux')\n",
        "    input_sleep = Input(shape=(lookback_minutes, 1), name='corr_input_sleep')\n",
        "    input_body1 = Input(shape=(lookback_minutes, 3), name='corr_input_body1') # hr, hrv, resp\n",
        "    input_body2 = Input(shape=(lookback_minutes, 1), name='corr_input_body2') # skin_temp\n",
        "    input_zeit1 = Input(shape=(lookback_minutes, 1), name='corr_input_zeit1') # meal\n",
        "    input_zeit2 = Input(shape=(lookback_minutes, 1), name='corr_input_zeit2') # exercise\n",
        "    input_zeit3 = Input(shape=(lookback_minutes, 1), name='corr_input_zeit3') # ambient_temp\n",
        "\n",
        "    def create_feat_extractor(inp, name):\n",
        "        x = Conv1D(16, 30, activation='relu', padding='causal', name=f'corr_{name}_cnn1')(inp)\n",
        "        x = Conv1D(8, 30, activation='relu', padding='causal', name=f'corr_{name}_cnn2')(x)\n",
        "        return x\n",
        "\n",
        "    features = [\n",
        "        create_feat_extractor(input_lux, 'lux'), create_feat_extractor(input_sleep, 'sleep'),\n",
        "        create_feat_extractor(input_body1, 'body1'), create_feat_extractor(input_body2, 'body2'),\n",
        "        create_feat_extractor(input_zeit1, 'zeit1'), create_feat_extractor(input_zeit2, 'zeit2'),\n",
        "        create_feat_extractor(input_zeit3, 'zeit3'),\n",
        "    ]\n",
        "    combined_feature_sequence = Concatenate(axis=-1, dtype='float32')(features)\n",
        "    lstm_output = LSTM(lstm_units, return_sequences=False, name='correction_lstm')(combined_feature_sequence)\n",
        "    x = Dropout(DROPOUT_RATE)(lstm_output)\n",
        "    x = Dense(64, activation='relu')(x)\n",
        "    x = Dense(32, activation='relu')(x)\n",
        "\n",
        "    correction_params = Dense(output_size, activation='linear', name='correction_params', dtype='float32')(x)\n",
        "\n",
        "    model_inputs = [input_lux, input_sleep, input_body1, input_body2, input_zeit1, input_zeit2, input_zeit3]\n",
        "    model = Model(inputs=model_inputs, outputs=correction_params, name='FourierCorrectionModel')\n",
        "    return model\n",
        "\n",
        "@tf.keras.utils.register_keras_serializable()\n",
        "class PositionalEncoding(tf.keras.layers.Layer):\n",
        "    \"\"\"위치 정보를 임베딩에 추가하는 레이어\"\"\"\n",
        "    def __init__(self, position, d_model, **kwargs):\n",
        "        super(PositionalEncoding, self).__init__(**kwargs)\n",
        "        self.position = position\n",
        "        self.d_model = d_model\n",
        "        self.pos_encoding = self.positional_encoding(position, d_model)\n",
        "\n",
        "    def get_angles(self, position, i, d_model):\n",
        "        angles = 1 / tf.pow(10000, (2 * (i // 2)) / tf.cast(d_model, tf.float32))\n",
        "        return position * angles\n",
        "\n",
        "    def positional_encoding(self, position, d_model):\n",
        "        angle_rads = self.get_angles(\n",
        "            position=tf.range(position, dtype=tf.float32)[:, tf.newaxis],\n",
        "            i=tf.range(d_model, dtype=tf.float32)[tf.newaxis, :], d_model=d_model)\n",
        "        sines = tf.math.sin(angle_rads[:, 0::2])\n",
        "        cosines = tf.math.cos(angle_rads[:, 1::2])\n",
        "        pos_encoding = tf.concat([sines, cosines], axis=-1)\n",
        "        pos_encoding = pos_encoding[tf.newaxis, ...]\n",
        "        return tf.cast(pos_encoding, tf.float32)\n",
        "\n",
        "    def call(self, inputs, **kwargs):\n",
        "        return inputs + tf.cast(self.pos_encoding[:, :tf.shape(inputs)[1], :], dtype=inputs.dtype)\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super(PositionalEncoding, self).get_config()\n",
        "        config.update({\"position\": self.position, \"d_model\": self.d_model})\n",
        "        return config\n",
        "\n",
        "@tf.keras.utils.register_keras_serializable()\n",
        "class BloodPressureDecoder(tf.keras.Model):\n",
        "    \"\"\"혈압 예측을 위한 Autoregressive 디코더\"\"\"\n",
        "    def __init__(self, decoder_lstm_units, prediction_horizon, num_bp_features,\n",
        "                 d_model, rate=0.1, **kwargs):\n",
        "        super(BloodPressureDecoder, self).__init__(**kwargs)\n",
        "        self.decoder_lstm_units = decoder_lstm_units\n",
        "        self.prediction_horizon = prediction_horizon\n",
        "        self.num_bp_features = num_bp_features\n",
        "        self.d_model = d_model\n",
        "        self.rate = rate\n",
        "        self.h_projection = Dense(decoder_lstm_units, name='h_projection')\n",
        "        self.c_projection = Dense(decoder_lstm_units, name='c_projection')\n",
        "\n",
        "        self.decoder_lstm = LSTM(decoder_lstm_units, return_sequences=True,\n",
        "                                return_state=True, name='decoder_lstm')\n",
        "        self.bp_prediction_head = tf.keras.Sequential([\n",
        "            Dense(128, activation='relu'),\n",
        "            Dropout(rate),\n",
        "            Dense(64, activation='relu'),\n",
        "            Dropout(rate),\n",
        "            Dense(num_bp_features, dtype='float32')\n",
        "        ], name='bp_prediction_head')\n",
        "        self.start_token = self.add_weight(\n",
        "            name='start_token', shape=(1, 1, num_bp_features),\n",
        "            initializer='zeros', trainable=True\n",
        "        )\n",
        "\n",
        "    def call(self, inputs, target_sequence=None, training=False):\n",
        "        context_vector, future_lco, future_activities = inputs\n",
        "        batch_size = tf.shape(context_vector)[0]\n",
        "\n",
        "        initial_h = self.h_projection(context_vector)\n",
        "        initial_c = self.c_projection(context_vector)\n",
        "        initial_states = [initial_h, initial_c]\n",
        "\n",
        "        # --- 학습 시: Teacher Forcing 적용 (for 루프 없음) ---\n",
        "        if training and target_sequence is not None:\n",
        "            # 디코더의 입력 시퀀스를 한 번에 구성합니다.\n",
        "            start_token_tiled = tf.tile(self.start_token, [batch_size, 1, 1])\n",
        "            shifted_target = target_sequence[:, :-1, :] # 마지막 타임스텝 제외\n",
        "\n",
        "            # 입력으로 사용할 이전 스텝의 혈압 정보\n",
        "            prev_bp_sequence = tf.concat([start_token_tiled, shifted_target], axis=1)\n",
        "            casted_prev_bp = tf.cast(prev_bp_sequence, dtype=future_lco.dtype)\n",
        "\n",
        "            # 모든 타임스텝의 입력을 결합합니다.\n",
        "            decoder_inputs = tf.concat([casted_prev_bp, future_lco, future_activities], axis=-1)\n",
        "\n",
        "            # LSTM을 전체 시퀀스에 대해 단 한번만 호출합니다.\n",
        "            full_sequence_output, _, _ = self.decoder_lstm(decoder_inputs, initial_state=initial_states, training=training)\n",
        "\n",
        "            # 최종 혈압 예측\n",
        "            all_predictions = self.bp_prediction_head(full_sequence_output)\n",
        "            return all_predictions\n",
        "\n",
        "        # --- 예측 시: 기존의 Autoregressive 방식 사용 (for 루프 유지) ---\n",
        "        else:\n",
        "            bp_predictions = []\n",
        "            prev_bp = tf.tile(self.start_token, [batch_size, 1, 1])\n",
        "            states = initial_states\n",
        "\n",
        "            for t in range(self.prediction_horizon):\n",
        "                current_lco = future_lco[:, t:t+1, :]\n",
        "                current_activity = future_activities[:, t:t+1, :]\n",
        "                casted_prev_bp = tf.cast(prev_bp, dtype=current_lco.dtype)\n",
        "                decoder_input = tf.concat([casted_prev_bp, current_lco, current_activity], axis=-1)\n",
        "\n",
        "                lstm_output, h, c = self.decoder_lstm(decoder_input, initial_state=states, training=training)\n",
        "                states = [h, c]\n",
        "\n",
        "                bp_pred = self.bp_prediction_head(lstm_output)\n",
        "                bp_predictions.append(bp_pred)\n",
        "                prev_bp = bp_pred # 자신의 예측을 다음 입력으로 사용\n",
        "\n",
        "            all_predictions = tf.concat(bp_predictions, axis=1)\n",
        "            return all_predictions\n",
        "\n",
        "    def get_config(self):\n",
        "        return {\n",
        "            \"decoder_lstm_units\": self.decoder_lstm_units,\n",
        "            \"prediction_horizon\": self.prediction_horizon,\n",
        "            \"num_bp_features\": self.num_bp_features,\n",
        "            \"d_model\": self.d_model,\n",
        "            \"rate\": self.rate\n",
        "        }\n",
        "\n",
        "@tf.keras.utils.register_keras_serializable()\n",
        "class CircadianEncoder(tf.keras.Model):\n",
        "    \"\"\"과거 데이터를 인코딩하여 컨텍스트 벡터 생성\"\"\"\n",
        "    def __init__(self, num_layers, d_model, num_heads, dff, rate=0.1, **kwargs):\n",
        "        super(CircadianEncoder, self).__init__(**kwargs)\n",
        "        self.num_layers = num_layers\n",
        "        self.d_model = d_model\n",
        "        self.num_heads = num_heads\n",
        "        self.dff = dff\n",
        "        self.rate = rate\n",
        "\n",
        "        self.first_block = ContextualTransformerBlock(d_model, num_heads, dff, rate)\n",
        "        self.other_blocks = [SelfAttentionBlock(d_model, num_heads, dff, rate) for _ in range(num_layers - 1)]\n",
        "        self.context_projection = Dense(d_model, name='context_projection')\n",
        "\n",
        "    def call(self, inputs, training=False):\n",
        "        encoded_features, past_info = inputs\n",
        "        current_info_length = 2 * DAY_MINUTES\n",
        "        current_info = encoded_features[:, -current_info_length:, :]\n",
        "\n",
        "        x = self.first_block((past_info, current_info), training=training)\n",
        "        for block in self.other_blocks:\n",
        "            x = block(x, training=training)\n",
        "\n",
        "        pooled_vector = tf.reduce_mean(x, axis=1)\n",
        "        last_vector = x[:, -1, :]\n",
        "        combined_vector = tf.concat([pooled_vector, last_vector], axis=-1)\n",
        "        context_vector = self.context_projection(combined_vector)\n",
        "        return context_vector\n",
        "\n",
        "    def get_config(self):\n",
        "        return {\n",
        "            \"num_layers\": self.num_layers, \"d_model\": self.d_model,\n",
        "            \"num_heads\": self.num_heads, \"dff\": self.dff, \"rate\": self.rate\n",
        "        }\n",
        "\n",
        "@tf.keras.utils.register_keras_serializable()\n",
        "class RealtimeBPModel(Model):\n",
        "    \"\"\"실시간 혈압 예측을 위한 통합 모델\"\"\"\n",
        "    def __init__(self, lco_feature_extractor, other_feature_extractor,\n",
        "                 fourier_correction_model, encoder, decoder, config, **kwargs):\n",
        "        super(RealtimeBPModel, self).__init__(**kwargs)\n",
        "        self.lco_feature_extractor = lco_feature_extractor\n",
        "        self.other_feature_extractor = other_feature_extractor\n",
        "        self.fourier_correction_model = fourier_correction_model\n",
        "        self.encoder = encoder\n",
        "        self.decoder = decoder\n",
        "        self.config = config\n",
        "\n",
        "        self.fourier_layer = FourierTrajectoryLayer(config['num_harmonics'])\n",
        "        self.pos_encoding_layer = PositionalEncoding(\n",
        "            position=config['input_seq_len'], d_model=config['d_model']\n",
        "        )\n",
        "        self.lambda_reg = config['lambda_reg']\n",
        "        self.lambda_cont = config['lambda_cont']\n",
        "        self.lambda_boundary = config['lambda_boundary']\n",
        "\n",
        "    def call(self, inputs, y=None, training=False):\n",
        "        batch_size = tf.shape(inputs['time_offset'])[0]\n",
        "        num_main_seq_days = self.config['input_seq_len'] // DAY_MINUTES\n",
        "        lookback_minutes = self.config['lookback_days'] * DAY_MINUTES\n",
        "\n",
        "        # --- 1. D-1 이전까지의 푸리에 보정 궤적 생성 (벡터화 방식 적용) ---\n",
        "        # [수정] is_d_day_sample을 배치 내 첫 번째 샘플 기준으로 계산\n",
        "        prediction_minute_in_day_tensor = inputs['prediction_minute_in_day']\n",
        "        is_d_day_sample = tf.greater(prediction_minute_in_day_tensor[0, 0], 0)\n",
        "\n",
        "        days_to_correct = tf.where(is_d_day_sample, num_main_seq_days - 1, num_main_seq_days)\n",
        "\n",
        "        def calculate_correction_and_add_loss():\n",
        "            \"\"\"\n",
        "            [수정된 함수]\n",
        "            tf.map_fn 대신 벡터화된 연산을 사용하여 보정 궤도를 계산합니다.\n",
        "            \"\"\"\n",
        "            # 1.1 입력 데이터 준비 (Framing)\n",
        "            correction_input_keys = ['corr_input_lux', 'corr_input_sleep', 'corr_input_body1',\n",
        "                                   'corr_input_body2', 'corr_input_zeit1', 'corr_input_zeit2', 'corr_input_zeit3']\n",
        "            correction_inputs_list = [inputs[key] for key in correction_input_keys]\n",
        "\n",
        "            padding_minutes = (self.config['lookback_days'] - 1) * DAY_MINUTES\n",
        "            padded_correction_inputs = []\n",
        "            for data_tensor in correction_inputs_list:\n",
        "                num_features = tf.shape(data_tensor)[-1]\n",
        "                paddings = tf.zeros([batch_size, padding_minutes, num_features], dtype=data_tensor.dtype)\n",
        "                padded_tensor = Concatenate(axis=1)([paddings, data_tensor])\n",
        "                padded_correction_inputs.append(padded_tensor)\n",
        "\n",
        "            framed_inputs = [tf.signal.frame(data, frame_length=lookback_minutes, frame_step=DAY_MINUTES, axis=1)\n",
        "                            for data in padded_correction_inputs]\n",
        "\n",
        "            # days_to_correct 만큼만 슬라이싱합니다.\n",
        "            framed_inputs_sliced = [f[:, :days_to_correct, :, :] for f in framed_inputs]\n",
        "\n",
        "            # 1.2. 벡터화된 계산 (tf.map_fn 대체)\n",
        "            # (batch, num_days, lookback, features) -> (batch * num_days, lookback, features)\n",
        "            # '날짜' 차원을 '배치' 차원으로 합쳐서 큰 배치 하나를 만듭니다.\n",
        "            reshaped_inputs = [tf.reshape(f, [-1, lookback_minutes, tf.shape(f)[-1]]) for f in framed_inputs_sliced]\n",
        "            vectorized_params = self.fourier_correction_model(reshaped_inputs, training=training)\n",
        "            vectorized_curves = self.fourier_layer(vectorized_params)\n",
        "            all_daily_curves_swapped = tf.reshape(vectorized_curves, [batch_size, days_to_correct, DAY_MINUTES, 2])\n",
        "            all_daily_curves = tf.reshape(all_daily_curves_swapped, [batch_size, -1, 2])\n",
        "\n",
        "            total_loss = tf.constant(0.0, dtype=tf.float32)\n",
        "            if training:\n",
        "                reg_loss = tf.reduce_mean(tf.square(tf.cast(all_daily_curves, tf.float32))) * self.lambda_reg\n",
        "                total_loss += reg_loss\n",
        "\n",
        "                def apply_cont_loss():\n",
        "                    ends = all_daily_curves_swapped[:, :-1, -1, :]\n",
        "                    starts = all_daily_curves_swapped[:, 1:, 0, :]\n",
        "                    # 계산 결과를 float32로 캐스팅하여 타입 통일\n",
        "                    cont_loss_val = tf.reduce_mean(tf.square(ends - starts)) * self.lambda_cont\n",
        "                    return tf.cast(cont_loss_val, tf.float32)\n",
        "\n",
        "                def no_op_cont():\n",
        "                    return tf.constant(0.0, dtype=tf.float32)\n",
        "\n",
        "                continuity_loss = tf.cond(tf.shape(all_daily_curves_swapped)[1] > 1,\n",
        "                                          true_fn=apply_cont_loss,\n",
        "                                          false_fn=no_op_cont)\n",
        "                total_loss += continuity_loss\n",
        "\n",
        "            # 계산된 커브와 총 손실을 함께 반환\n",
        "            return all_daily_curves, total_loss\n",
        "\n",
        "        def no_correction():\n",
        "            # 반환 값의 형태와 타입을 true_fn과 동일하게 맞춰줌\n",
        "            return tf.zeros([batch_size, 0, 2], dtype=self.compute_dtype), tf.constant(0.0, dtype=tf.float32)\n",
        "\n",
        "        # tf.cond의 반환값을 변수로 받음\n",
        "        correction_up_to_d_minus_1, conditional_losses_part1 = tf.cond(\n",
        "            pred=tf.greater(days_to_correct, 0),\n",
        "            true_fn=calculate_correction_and_add_loss,\n",
        "            false_fn=no_correction\n",
        "        )\n",
        "\n",
        "        # 외부 스코프에서 손실을 추가\n",
        "        if training:\n",
        "            self.add_loss(conditional_losses_part1)\n",
        "\n",
        "\n",
        "        # --- 2. 과거-현재 궤적 통합 ---\n",
        "        d_day_len = self.config['input_seq_len'] - tf.shape(correction_up_to_d_minus_1)[1]\n",
        "        d_day_padding = tf.zeros([batch_size, d_day_len, 2], dtype=self.compute_dtype)\n",
        "        full_correction = Concatenate(axis=1)([correction_up_to_d_minus_1, d_day_padding])\n",
        "\n",
        "        # --- 3. 인코더 입력 시퀀스 생성 ---\n",
        "        offsets = tf.cast(inputs['time_offset'], dtype=tf.int32)\n",
        "        sequence_indices = tf.range(self.config['input_seq_len'], dtype=tf.int32)[tf.newaxis, :]\n",
        "        time_indices = offsets + sequence_indices\n",
        "\n",
        "        aligned_baseline = tf.gather(inputs['baseline_inputs'], time_indices, batch_dims=1)\n",
        "        corrected_lco_trajectory = tf.cast(aligned_baseline + full_correction, self.compute_dtype)\n",
        "\n",
        "        other_input_keys = ['input_lux', 'input_sleep', 'input_body1', 'input_body2',\n",
        "                           'input_zeit1', 'input_zeit2', 'input_zeit3']\n",
        "        main_cnn_inputs_other_list = [tf.gather(inputs[key], time_indices, batch_dims=1)\n",
        "                                     for key in other_input_keys]\n",
        "\n",
        "        # --- 4. 인코더 실행 ---\n",
        "        lco_features = self.lco_feature_extractor(corrected_lco_trajectory, training=training)\n",
        "        other_features = self.other_feature_extractor(main_cnn_inputs_other_list, training=training)\n",
        "        combined_features = Concatenate(axis=-1, dtype='float32')([lco_features, other_features])\n",
        "        combined_features = tf.cast(combined_features, self.compute_dtype)\n",
        "        encoded_features = self.pos_encoding_layer(combined_features)\n",
        "\n",
        "        past_info_indices = inputs['past_info_indices']\n",
        "        batch_indices = tf.tile(tf.range(batch_size, dtype=tf.int64)[:, tf.newaxis],\n",
        "                               [1, self.config['num_markers_to_keep'] * 3])\n",
        "        gather_indices = tf.stack([tf.reshape(batch_indices, [-1]),\n",
        "                                  tf.reshape(tf.maximum(past_info_indices, 0), [-1])], axis=1)\n",
        "        past_info_flat = tf.gather_nd(encoded_features, gather_indices)\n",
        "        past_info = tf.reshape(past_info_flat, [batch_size, self.config['num_markers_to_keep'] * 3, self.config['d_model']])\n",
        "        past_info *= tf.cast(tf.not_equal(past_info_indices, -1), self.compute_dtype)[:, :, tf.newaxis]\n",
        "\n",
        "        context_vector = self.encoder((encoded_features, past_info), training=training)\n",
        "\n",
        "        # --- 5. 디코더 실행 ---\n",
        "        future_lco = inputs['future_lco']\n",
        "        future_activities = inputs['future_activities']\n",
        "\n",
        "        # 학습 시에는 교사 강요를 위해 정답 레이블(target_sequence)을 전달합니다.\n",
        "        if training:\n",
        "            bp_predictions = self.decoder(\n",
        "                (context_vector, future_lco, future_activities),\n",
        "                target_sequence=y, # <- 별도 인자로 받은 y를 사용\n",
        "                training=training\n",
        "            )\n",
        "        # 예측 시에는 target_sequence 없이 호출하여 autoregressive 모드로 작동시킵니다.\n",
        "        else:\n",
        "            bp_predictions = self.decoder(\n",
        "                (context_vector, future_lco, future_activities),\n",
        "                training=training\n",
        "            )\n",
        "\n",
        "        # --- 6. 학습 시 손실 계산 ---\n",
        "        if training:\n",
        "            # --- [수정된 부분 2] ---\n",
        "            def apply_boundary_loss():\n",
        "                d_minus_1_end_corrected = corrected_lco_trajectory[:, days_to_correct * DAY_MINUTES - 1, :]\n",
        "                d_day_start_simulated = inputs['d_day_lco'][:, 0, :2]\n",
        "                # 계산 결과를 float32로 캐스팅하여 타입 통일\n",
        "                boundary_loss_val = tf.reduce_mean(tf.square(d_minus_1_end_corrected - d_day_start_simulated)) * self.lambda_boundary\n",
        "                return tf.cast(boundary_loss_val, tf.float32)\n",
        "\n",
        "            def no_op_boundary():\n",
        "                return tf.constant(0.0, dtype=tf.float32)\n",
        "\n",
        "            boundary_loss = tf.cond(is_d_day_sample,\n",
        "                                    true_fn=apply_boundary_loss,\n",
        "                                    false_fn=no_op_boundary)\n",
        "\n",
        "            self.add_loss(boundary_loss)\n",
        "\n",
        "        return bp_predictions\n",
        "\n",
        "    def get_config(self):\n",
        "        return {\"config\": self.config}\n",
        "\n",
        "def build_main_feature_extractors(time_steps=INPUT_SEQUENCE_LENGTH, d_model=D_MODEL):\n",
        "    \"\"\"각 입력 변수들을 위한 특징 추출기(CNN) 생성\"\"\"\n",
        "    feature_proportions = {\n",
        "        'lco': 0.25, 'lux': 0.125, 'sleep': 0.125, 'body1': 0.25,\n",
        "        'body2': 0.0625, 'zeit1': 0.0625, 'zeit2': 0.0625, 'zeit3': 0.0625,\n",
        "    }\n",
        "    cnn_block_map = { name: max(2, int(d_model * prop) // 2 * 2) for name, prop in feature_proportions.items() }\n",
        "    current_sum = sum(cnn_block_map.values())\n",
        "    if current_sum != d_model: cnn_block_map['lco'] += d_model - current_sum\n",
        "\n",
        "    def create_cnn_block(n_features, name_prefix):\n",
        "        return tf.keras.Sequential([\n",
        "            Conv1D(filters=32, kernel_size=5, activation='relu', padding='causal', name=f\"{name_prefix}_cnn1\"),\n",
        "            Conv1D(filters=n_features, kernel_size=5, activation='relu', padding='causal', name=f\"{name_prefix}_cnn2\")\n",
        "        ], name=f\"{name_prefix}_cnn_block\")\n",
        "\n",
        "    input_lco = Input(shape=(time_steps, 2), name='input_lco')\n",
        "    features_lco = create_cnn_block(cnn_block_map['lco'], 'lco')(input_lco)\n",
        "    lco_feature_extractor = Model(inputs=input_lco, outputs=features_lco, name='LCOFeatureExtractor')\n",
        "\n",
        "    input_lux = Input(shape=(time_steps, 1), name='input_lux')\n",
        "    input_sleep = Input(shape=(time_steps, 1), name='input_sleep')\n",
        "    input_body1 = Input(shape=(time_steps, 3), name='input_body1')\n",
        "    input_body2 = Input(shape=(time_steps, 1), name='input_body2')\n",
        "    input_zeit1 = Input(shape=(time_steps, 1), name='input_zeit1')\n",
        "    input_zeit2 = Input(shape=(time_steps, 1), name='input_zeit2')\n",
        "    input_zeit3 = Input(shape=(time_steps, 1), name='input_zeit3')\n",
        "\n",
        "    features_lux = create_cnn_block(cnn_block_map['lux'], 'lux')(input_lux)\n",
        "    features_sleep = create_cnn_block(cnn_block_map['sleep'], 'sleep')(input_sleep)\n",
        "    features_body1 = create_cnn_block(cnn_block_map['body1'], 'body1')(input_body1)\n",
        "    features_body2 = create_cnn_block(cnn_block_map['body2'], 'body2')(input_body2)\n",
        "    features_zeit1 = create_cnn_block(cnn_block_map['zeit1'], 'zeit1')(input_zeit1)\n",
        "    features_zeit2 = create_cnn_block(cnn_block_map['zeit2'], 'zeit2')(input_zeit2)\n",
        "    features_zeit3 = create_cnn_block(cnn_block_map['zeit3'], 'zeit3')(input_zeit3)\n",
        "\n",
        "    combined_other_features = Concatenate(axis=-1, name='combined_other_features', dtype='float32')([\n",
        "        features_lux, features_sleep, features_body1,\n",
        "        features_body2, features_zeit1, features_zeit2, features_zeit3\n",
        "    ])\n",
        "\n",
        "    other_inputs = [input_lux, input_sleep, input_body1, input_body2, input_zeit1, input_zeit2, input_zeit3]\n",
        "    other_feature_extractor = Model(inputs=other_inputs, outputs=combined_other_features, name='OtherFeatureExtractor')\n",
        "\n",
        "    return lco_feature_extractor, other_feature_extractor\n",
        "\n",
        "@tf.keras.utils.register_keras_serializable()\n",
        "class ContextualTransformerBlock(tf.keras.layers.Layer):\n",
        "    \"\"\"과거 정보(context)와 현재 정보를 결합하는 트랜스포머 블록\"\"\"\n",
        "    def __init__(self, d_model, num_heads, dff, rate=0.1, **kwargs):\n",
        "        super(ContextualTransformerBlock, self).__init__(**kwargs)\n",
        "        self.d_model, self.num_heads, self.dff, self.rate = d_model, num_heads, dff, rate\n",
        "        self.mha1 = MultiHeadAttention(num_heads=num_heads, key_dim=d_model)\n",
        "        self.mha2 = MultiHeadAttention(num_heads=num_heads, key_dim=d_model)\n",
        "        self.ffn = tf.keras.Sequential([Dense(dff, activation='relu'), Dense(d_model)])\n",
        "        self.layernorm1, self.layernorm2, self.layernorm3 = LayerNormalization(epsilon=1e-6), LayerNormalization(epsilon=1e-6), LayerNormalization(epsilon=1e-6)\n",
        "        self.dropout1, self.dropout2, self.dropout3 = Dropout(rate), Dropout(rate), Dropout(rate)\n",
        "\n",
        "    def call(self, inputs, training=False, **kwargs):\n",
        "        past_info, current_info = inputs\n",
        "        attn_output_current = self.mha1(query=current_info, key=current_info, value=current_info, training=training)\n",
        "        current_info_sa = self.layernorm1(current_info + self.dropout1(attn_output_current, training=training))\n",
        "        attn_output_cross = self.mha2(query=current_info_sa, key=past_info, value=past_info, training=training)\n",
        "        current_info_contextualized = self.layernorm2(current_info_sa + self.dropout2(attn_output_cross, training=training))\n",
        "        ffn_output = self.ffn(current_info_contextualized)\n",
        "        final_output = self.layernorm3(current_info_contextualized + self.dropout3(ffn_output, training=training))\n",
        "        return final_output\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super(ContextualTransformerBlock, self).get_config()\n",
        "        config.update({\"d_model\": self.d_model, \"num_heads\": self.num_heads, \"dff\": self.dff, \"rate\": self.rate})\n",
        "        return config\n",
        "\n",
        "@tf.keras.utils.register_keras_serializable()\n",
        "class SelfAttentionBlock(tf.keras.layers.Layer):\n",
        "    \"\"\"표준 트랜스포머 인코더 블록\"\"\"\n",
        "    def __init__(self, d_model, num_heads, dff, rate=0.1, **kwargs):\n",
        "        super(SelfAttentionBlock, self).__init__(**kwargs)\n",
        "        self.d_model, self.num_heads, self.dff, self.rate = d_model, num_heads, dff, rate\n",
        "        self.mha = MultiHeadAttention(num_heads=num_heads, key_dim=d_model)\n",
        "        self.ffn = tf.keras.Sequential([Dense(dff, activation='relu'), Dense(d_model)])\n",
        "        self.layernorm1, self.layernorm2 = LayerNormalization(epsilon=1e-6), LayerNormalization(epsilon=1e-6)\n",
        "        self.dropout1, self.dropout2 = Dropout(rate), Dropout(rate)\n",
        "\n",
        "    def call(self, x, training=False, **kwargs):\n",
        "        attn_output = self.mha(query=x, key=x, value=x, training=training)\n",
        "        out1 = self.layernorm1(x + self.dropout1(attn_output, training=training))\n",
        "        ffn_output = self.ffn(out1)\n",
        "        return self.layernorm2(out1 + self.dropout2(ffn_output, training=training))\n",
        "\n",
        "    def get_config(self):\n",
        "        config = super(SelfAttentionBlock, self).get_config()\n",
        "        config.update({\"d_model\": self.d_model, \"num_heads\": self.num_heads, \"dff\": self.dff, \"rate\": self.rate})\n",
        "        return config\n",
        "\n",
        "# =============================================================================\n",
        "# 5. 데이터 전처리 및 샘플 생성\n",
        "# =============================================================================\n",
        "def prepare_realtime_samples(df_all, activity_plans, person_ids, config):\n",
        "    \"\"\"실시간 예측을 위한 샘플 준비 - 매 분마다 샘플 생성\"\"\"\n",
        "    print(\"--- 실시간 예측 샘플 준비 시작 (매 분마다) ---\")\n",
        "    samples = []\n",
        "    min_required_len = config['input_seq_len'] + PREDICTION_HORIZON\n",
        "\n",
        "    for person_id in tqdm(person_ids, desc=\"샘플 생성 중\"):\n",
        "        person_data = df_all[df_all['person_id'] == person_id]\n",
        "        if len(person_data) < min_required_len:\n",
        "            continue\n",
        "\n",
        "        person_data = person_data.sort_values('timestamp').reset_index(drop=True)\n",
        "\n",
        "        # 최소 필요 데이터 확인\n",
        "        # 푸리에 보정을 위해 추가 lookback_days가 필요\n",
        "        min_required_idx = (config['lookback_days'] -1 + config['input_seq_len'] // DAY_MINUTES) * DAY_MINUTES\n",
        "\n",
        "        for idx in range(min_required_idx, len(person_data) - PREDICTION_HORIZON):\n",
        "            prediction_time = person_data.iloc[idx]['timestamp']\n",
        "            future_bp = person_data.iloc[idx:idx + PREDICTION_HORIZON][['systolic_bp', 'diastolic_bp']].values\n",
        "\n",
        "            if np.any(np.isnan(future_bp)):\n",
        "                continue\n",
        "\n",
        "            activity_plan = get_activity_plan_for_prediction(\n",
        "                activity_plans, person_id, prediction_time, PREDICTION_HORIZON)\n",
        "\n",
        "            samples.append({\n",
        "                'person_id': person_id,\n",
        "                'prediction_idx': idx,\n",
        "                'future_bp': future_bp,\n",
        "                'timestamp': prediction_time,\n",
        "                'activity_plan': activity_plan\n",
        "            })\n",
        "\n",
        "    print(f\"--- 총 {len(samples)}개의 샘플 생성 완료 ---\")\n",
        "    return samples\n",
        "\n",
        "def create_realtime_tfrecords(df_all_scaled, samples, config, file_path,\n",
        "                             person_markers_dict, baseline_trajectories):\n",
        "    \"\"\"실시간 예측을 위한 TFRecord 생성\"\"\"\n",
        "    print(f\"--- 실시간 TFRecord 파일 생성 시작: {file_path} ---\")\n",
        "\n",
        "    # 입력 데이터 컬럼 정의\n",
        "    main_cnn_other_cols = {\n",
        "        'input_lux': ['lux'], 'input_sleep': ['is_sleeping'],\n",
        "        'input_body1': ['heart_rate', 'hrv', 'respiration_rate'],\n",
        "        'input_body2': ['skin_temp'], 'input_zeit1': ['meal_event'],\n",
        "        'input_zeit2': ['exercise_event'], 'input_zeit3': ['ambient_temp'],\n",
        "    }\n",
        "    fourier_corr_cols = main_cnn_other_cols # 동일한 데이터 사용\n",
        "\n",
        "    # NumPy 배열로 변환하여 속도 향상\n",
        "    df_scaled_np_dict = {pid: df_all_scaled[df_all_scaled['person_id'] == pid].sort_values('timestamp').reset_index(drop=True) for pid in df_all_scaled['person_id'].unique()}\n",
        "\n",
        "    with tf.io.TFRecordWriter(file_path) as writer:\n",
        "        for sample_info in tqdm(samples, desc=f\"{os.path.basename(file_path)} 생성 중\"):\n",
        "            person_id = sample_info['person_id']\n",
        "            person_df = df_scaled_np_dict[person_id]\n",
        "            numeric_cols_for_model = [\n",
        "                'lux', 'is_sleeping', 'heart_rate', 'hrv', 'respiration_rate',\n",
        "                'skin_temp', 'meal_event', 'exercise_event', 'ambient_temp',\n",
        "                'x_base', 'xc_base'\n",
        "                # 'n_base' 등 모델에 사용되는 모든 숫자 열 포함\n",
        "            ]\n",
        "\n",
        "            # 필요한 열만 선택하여 새로운 DataFrame을 만들고 NumPy로 변환합니다.\n",
        "            person_numeric_df = person_df[numeric_cols_for_model]\n",
        "            person_np = person_numeric_df.to_numpy()\n",
        "            cols_map = {name: i for i, name in enumerate(person_numeric_df.columns)}\n",
        "\n",
        "            # --- [완결 로직] 루프 내에서 시간 변수 계산 ---\n",
        "            prediction_idx = sample_info['prediction_idx']\n",
        "\n",
        "            # 1. 메인 인코더가 사용할 입력 시퀀스의 시작/끝 인덱스 계산\n",
        "            main_seq_start_idx = prediction_idx - config['input_seq_len']\n",
        "\n",
        "            # 2. 푸리에 보정 모델이 사용할 전체 데이터 범위 계산\n",
        "            #   (lookback_days + main_seq_days 만큼의 데이터가 필요)\n",
        "            num_total_days = config['lookback_days'] + (config['input_seq_len'] // DAY_MINUTES)\n",
        "            time_offset = main_seq_start_idx % DAY_MINUTES\n",
        "            slice_start_midnight = main_seq_start_idx - time_offset\n",
        "            slice_end_midnight = slice_start_midnight + num_total_days * DAY_MINUTES\n",
        "            # print(f\"Checking Sample -> Person ID: {person_id}, Prediction Idx: {prediction_idx}, Required Slice: [{slice_start_midnight}:{slice_end_midnight}], Actual Person Data Length: {len(person_df)}\")\n",
        "\n",
        "            if slice_start_midnight < 0 or slice_end_midnight > len(person_df):\n",
        "                continue\n",
        "\n",
        "            # D-day와 미래 LCO 궤적 생성\n",
        "            try:\n",
        "                person_baseline = baseline_trajectories[person_id]\n",
        "                d_day_trajectory, future_lco = generate_d_day_and_future_lco(\n",
        "                    person_df, prediction_idx, person_baseline,\n",
        "                    sample_info['activity_plan'], PARAMS, PREDICTION_HORIZON\n",
        "                )\n",
        "            except Exception as e:\n",
        "                print(f\"경고: 샘플 {prediction_idx}의 LCO 궤적 생성 중 오류: {e}\")\n",
        "                continue\n",
        "\n",
        "            padded_d_day_trajectory = np.zeros((config['day_minutes'], 3), dtype=np.float32)\n",
        "            current_len = d_day_trajectory.shape[0]\n",
        "            if current_len > 0:\n",
        "                padded_d_day_trajectory[:current_len, :] = d_day_trajectory\n",
        "\n",
        "            # 입력 데이터 준비\n",
        "            example_dict = {}\n",
        "            full_slice_np = person_np[slice_start_midnight:slice_end_midnight]\n",
        "\n",
        "            def get_cols(cols_dict, col_map):\n",
        "                return {k: [col_map[c] for c in v] for k,v in cols_dict.items()}\n",
        "\n",
        "            fourier_corr_indices = get_cols(fourier_corr_cols, cols_map)\n",
        "            main_cnn_other_indices = get_cols(main_cnn_other_cols, cols_map)\n",
        "            baseline_indices = [cols_map['x_base'], cols_map['xc_base']]\n",
        "\n",
        "            for key, col_idxs in fourier_corr_indices.items():\n",
        "                new_key = f\"corr_{key}\"\n",
        "                example_dict[new_key] = tf.constant(full_slice_np[:, col_idxs], dtype=tf.float32)\n",
        "            for key, col_idxs in main_cnn_other_indices.items():\n",
        "                example_dict[key] = tf.constant(full_slice_np[:, col_idxs], dtype=tf.float32)\n",
        "\n",
        "            example_dict['baseline_inputs'] = tf.constant(full_slice_np[:, baseline_indices], dtype=tf.float32)\n",
        "            example_dict['time_offset'] = tf.constant([time_offset], dtype=tf.int32)\n",
        "\n",
        "            # Past info indices\n",
        "            selection_start_abs = main_seq_start_idx\n",
        "            selection_end_abs = prediction_idx - (2 * DAY_MINUTES)\n",
        "            example_dict['past_info_indices'] = generate_past_info_indices_optimized(\n",
        "                person_markers_dict[person_id], selection_start_abs, selection_end_abs,\n",
        "                config\n",
        "            )\n",
        "\n",
        "            prediction_minute_in_day = sample_info['timestamp'].hour * 60 + sample_info['timestamp'].minute\n",
        "            example_dict['prediction_minute_in_day'] = tf.constant([prediction_minute_in_day], dtype=tf.int32)\n",
        "\n",
        "            # 전처리된 궤적 데이터\n",
        "            example_dict['d_day_lco'] = tf.constant(padded_d_day_trajectory, dtype=tf.float32)\n",
        "            example_dict['future_lco'] = tf.constant(future_lco, dtype=tf.float32)\n",
        "\n",
        "            # 미래 활동 계획\n",
        "            future_activities = np.stack([sample_info['activity_plan']['sleep'],\n",
        "                                        sample_info['activity_plan']['meal'],\n",
        "                                        sample_info['activity_plan']['exercise']], axis=-1)\n",
        "            example_dict['future_activities'] = tf.constant(future_activities, dtype=tf.float32)\n",
        "\n",
        "            # 라벨\n",
        "            example_dict['label'] = tf.constant(sample_info['future_bp'], dtype=tf.float32)\n",
        "\n",
        "            writer.write(serialize_example(example_dict))\n",
        "\n",
        "    print(f\"--- 실시간 TFRecord 파일 생성 완료: {file_path} ---\")\n",
        "\n",
        "\n",
        "def _bytes_feature(value):\n",
        "    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n",
        "\n",
        "def serialize_example(inputs_dict):\n",
        "    feature = {key: _bytes_feature(tf.io.serialize_tensor(value).numpy())\n",
        "              for key, value in inputs_dict.items()}\n",
        "    return tf.train.Example(features=tf.train.Features(feature=feature)).SerializeToString()\n",
        "\n",
        "def moving_average_np(a, n=3):\n",
        "    ret = np.cumsum(a, dtype=float)\n",
        "    ret[n:] = ret[n:] - ret[:-n]\n",
        "    return ret[n - 1:] / n\n",
        "\n",
        "def precompute_all_markers_for_person(person_df):\n",
        "    calculation_df = person_df.assign(\n",
        "        corrected_skin_temp=person_df['skin_temp'] - person_df['ambient_temp']\n",
        "    )\n",
        "    heart_rate = calculation_df['heart_rate'].values\n",
        "    is_sleeping = calculation_df['is_sleeping'].values\n",
        "    temp_series = calculation_df['corrected_skin_temp'].values\n",
        "\n",
        "    hr_in_sleep = np.where(is_sleeping > 0.5, heart_rate, np.inf)\n",
        "    nadir_indices_abs = [\n",
        "        i + np.argmin(hr_in_sleep[i:i+60])\n",
        "        for i in range(0, len(calculation_df) - 60, 60)\n",
        "        if np.any(np.isfinite(hr_in_sleep[i:i+60]))\n",
        "    ]\n",
        "\n",
        "    onset_indices_abs, offset_indices_abs = [], []\n",
        "    if len(temp_series) > 40:\n",
        "        temp_deriv_smoothed = moving_average_np(np.gradient(moving_average_np(temp_series, 30)), 10)\n",
        "        offset_to_align = len(temp_series) - len(temp_deriv_smoothed)\n",
        "        onset_indices_abs = list(np.where(temp_deriv_smoothed > 0.001)[0] + offset_to_align)\n",
        "        offset_indices_abs = list(np.where(temp_deriv_smoothed < -0.001)[0] + offset_to_align)\n",
        "\n",
        "    return {\n",
        "        \"onset\": sorted(list(set(onset_indices_abs))),\n",
        "        \"nadir\": sorted(list(set(nadir_indices_abs))),\n",
        "        \"offset\": sorted(list(set(offset_indices_abs)))\n",
        "    }\n",
        "\n",
        "def generate_past_info_indices_optimized(precomputed_markers, selection_start_abs, selection_end_abs,\n",
        "                                        config):\n",
        "    num_markers_to_keep = config['num_markers_to_keep']\n",
        "    padding_value = -1\n",
        "    final_indices_relative = []\n",
        "\n",
        "    for marker_type in [\"onset\", \"nadir\", \"offset\"]:\n",
        "        marker_candidates_abs = precomputed_markers[marker_type]\n",
        "        start_idx = bisect.bisect_left(marker_candidates_abs, selection_start_abs)\n",
        "        end_idx = bisect.bisect_right(marker_candidates_abs, selection_end_abs)\n",
        "        valid_candidates = marker_candidates_abs[start_idx:end_idx]\n",
        "\n",
        "        if len(valid_candidates) > 0:\n",
        "            top_indices_abs = valid_candidates[-num_markers_to_keep:]\n",
        "            top_indices_relative = [idx - selection_start_abs for idx in top_indices_abs]\n",
        "            final_indices_relative.extend(reversed(top_indices_relative))\n",
        "            if len(top_indices_relative) < num_markers_to_keep:\n",
        "                final_indices_relative.extend([padding_value] * (num_markers_to_keep - len(top_indices_relative)))\n",
        "        else:\n",
        "            final_indices_relative.extend([padding_value] * num_markers_to_keep)\n",
        "\n",
        "    return np.array(final_indices_relative, dtype=np.int64)\n",
        "\n",
        "def get_stable_limit_cycle(params, output_dir, force_recalculate=False):\n",
        "    if not os.path.exists(output_dir): os.makedirs(output_dir)\n",
        "    cache_path = os.path.join(output_dir, \"stable_limit_cycle.npy\")\n",
        "    if os.path.exists(cache_path) and not force_recalculate:\n",
        "        return np.load(cache_path)\n",
        "\n",
        "    standard_sleep, standard_light = np.zeros(DAY_MINUTES), np.zeros(DAY_MINUTES)\n",
        "    standard_sleep[0:8*60] = 1\n",
        "    standard_light[8*60:22*60] = 250\n",
        "\n",
        "    light_func_spin_up = lambda t: standard_light[int((t % 24) * 60)]\n",
        "    sleep_func_spin_up = lambda t: standard_sleep[int((t % 24) * 60)]\n",
        "\n",
        "    sol_spin_up = solve_ivp(\n",
        "        fun=lco_model_ode, t_span=[0, 20 * 24], y0=[1.0, 0.0, 0.5],\n",
        "        method='BDF', args=(params, light_func_spin_up, sleep_func_spin_up),\n",
        "        dense_output=True, rtol=1e-6, atol=1e-9\n",
        "    )\n",
        "    if not sol_spin_up.success: raise RuntimeError(f\"안정 궤도 계산 실패: {sol_spin_up.message}\")\n",
        "\n",
        "    limit_cycle_map = sol_spin_up.sol(np.arange(19 * 24, 20 * 24, 1.0/60.0)).T\n",
        "    np.save(cache_path, limit_cycle_map)\n",
        "    return limit_cycle_map\n",
        "\n",
        "def generate_daily_baseline_trajectories_for_person(person_df, params, output_dir, pbar=None):\n",
        "    total_minutes = len(person_df)\n",
        "    num_days = len(person_df) // DAY_MINUTES\n",
        "    if num_days == 0: return np.zeros((total_minutes, 3))\n",
        "\n",
        "    limit_cycle_map = get_stable_limit_cycle(params, output_dir)\n",
        "    map_phases = np.arctan2(limit_cycle_map[:, 1], limit_cycle_map[:, 0])\n",
        "    final_trajectory = np.zeros((total_minutes, 3))\n",
        "\n",
        "    theoretical_anchor_minute = 4 * 60\n",
        "    last_known_anchor_minute = -1\n",
        "    t_eval_day_hours = np.arange(DAY_MINUTES) / 60.0\n",
        "\n",
        "    for day in range(num_days):\n",
        "        if pbar: pbar.set_postfix_str(f\"일일 궤도 생성 중... ({day + 1}/{num_days}일)\")\n",
        "\n",
        "        day_start_idx = day * DAY_MINUTES\n",
        "        day_end_idx = (day + 1) * DAY_MINUTES\n",
        "        day_df = person_df.iloc[day_start_idx:day_end_idx]\n",
        "\n",
        "        day_hr, day_sleep = day_df['heart_rate'].values, day_df['is_sleeping'].values\n",
        "        sleep_indices = np.where(day_sleep > 0.5)[0]\n",
        "\n",
        "        current_anchor_minute = sleep_indices[np.argmin(day_hr[sleep_indices])] if len(sleep_indices) > 0 else -1\n",
        "        if current_anchor_minute != -1: last_known_anchor_minute = current_anchor_minute\n",
        "\n",
        "        anchor_to_use = last_known_anchor_minute if last_known_anchor_minute != -1 else theoretical_anchor_minute\n",
        "        cbt_nadir_minute_in_day = (anchor_to_use + 120) % DAY_MINUTES\n",
        "        initial_phase_at_midnight = (-170.7 * np.pi / 180.0) - (cbt_nadir_minute_in_day * (2 * np.pi) / DAY_MINUTES)\n",
        "        initial_phase_at_midnight = (initial_phase_at_midnight + np.pi) % (2 * np.pi) - np.pi\n",
        "\n",
        "        y0 = limit_cycle_map[np.argmin(np.abs((map_phases - initial_phase_at_midnight + np.pi) % (2 * np.pi) - np.pi))]\n",
        "\n",
        "        light_func = interp1d(t_eval_day_hours, day_df['integrated_lux'].values, kind='linear', fill_value=\"extrapolate\")\n",
        "        sleep_func = interp1d(t_eval_day_hours, day_df['is_sleeping'].values, kind='linear', fill_value=\"extrapolate\")\n",
        "\n",
        "        sol_day = solve_ivp(\n",
        "            fun=lco_model_ode, t_span=[0, 24], y0=y0, method='BDF',\n",
        "            jac=lco_model_jacobian, args=(params, light_func, sleep_func),\n",
        "            dense_output=True, t_eval=t_eval_day_hours, rtol=1e-5, atol=1e-8\n",
        "        )\n",
        "\n",
        "        if sol_day.success and sol_day.y.shape[1] == DAY_MINUTES:\n",
        "            final_trajectory[day_start_idx:day_end_idx, :] = sol_day.y.T\n",
        "        elif day > 0:\n",
        "            final_trajectory[day_start_idx:day_end_idx, :] = final_trajectory[(day-1)*DAY_MINUTES:day*DAY_MINUTES, :]\n",
        "\n",
        "    if total_minutes > num_days * DAY_MINUTES and num_days > 0:\n",
        "        remaining_start = num_days * DAY_MINUTES\n",
        "        remaining_len = total_minutes - num_days * DAY_MINUTES\n",
        "        final_trajectory[remaining_start:, :] = final_trajectory[(num_days-1)*DAY_MINUTES : (num_days-1)*DAY_MINUTES+remaining_len, :]\n",
        "\n",
        "    return final_trajectory\n",
        "\n",
        "# =============================================================================\n",
        "# 6. 학습 및 평가\n",
        "# =============================================================================\n",
        "def train_and_evaluate_realtime(train_tfrecord, val_tfrecord, num_train_samples,\n",
        "                               num_val_samples, config):\n",
        "    \"\"\"실시간 혈압 예측 모델 학습 및 평가\"\"\"\n",
        "    print(\"\\n--- 실시간 혈압 예측 모델 학습 및 검증 시작 ---\")\n",
        "\n",
        "    # TFRecord 파싱을 위한 명세 정의\n",
        "    main_cnn_other_keys = ['input_lux', 'input_sleep', 'input_body1', 'input_body2',\n",
        "                          'input_zeit1', 'input_zeit2', 'input_zeit3']\n",
        "    fourier_corr_keys = ['corr_input_lux', 'corr_input_sleep', 'corr_input_body1',\n",
        "                        'corr_input_body2', 'corr_input_zeit1', 'corr_input_zeit2', 'corr_input_zeit3']\n",
        "    other_keys = ['baseline_inputs', 'past_info_indices', 'label', 'time_offset',\n",
        "                  'future_activities', 'future_lco', 'd_day_lco', 'prediction_minute_in_day']\n",
        "    feature_spec = {key: tf.io.FixedLenFeature([], tf.string)\n",
        "                   for key in main_cnn_other_keys + fourier_corr_keys + other_keys}\n",
        "\n",
        "    def _parse_function(example_proto):\n",
        "        parsed = tf.io.parse_single_example(example_proto, feature_spec)\n",
        "        inputs = {key: tf.io.parse_tensor(parsed[key], out_type=tf.float32) for key in main_cnn_other_keys}\n",
        "        for key in fourier_corr_keys:\n",
        "            inputs[key] = tf.io.parse_tensor(parsed[key], out_type=tf.float32)\n",
        "\n",
        "        inputs['baseline_inputs'] = tf.io.parse_tensor(parsed['baseline_inputs'], out_type=tf.float32)\n",
        "        inputs['past_info_indices'] = tf.io.parse_tensor(parsed['past_info_indices'], out_type=tf.int64)\n",
        "        inputs['time_offset'] = tf.io.parse_tensor(parsed['time_offset'], out_type=tf.int32)\n",
        "        inputs['prediction_minute_in_day'] = tf.io.parse_tensor(parsed['prediction_minute_in_day'], out_type=tf.int32)\n",
        "        inputs['d_day_lco'] = tf.io.parse_tensor(parsed['d_day_lco'], out_type=tf.float32)\n",
        "        inputs['future_lco'] = tf.io.parse_tensor(parsed['future_lco'], out_type=tf.float32)\n",
        "        inputs['future_activities'] = tf.io.parse_tensor(parsed['future_activities'], out_type=tf.float32)\n",
        "\n",
        "        label = tf.io.parse_tensor(parsed['label'], out_type=tf.float32)\n",
        "        return inputs, label\n",
        "\n",
        "    def make_dataset(file_path, batch_size):\n",
        "        return tf.data.TFRecordDataset(file_path, num_parallel_reads=tf.data.AUTOTUNE)\\\n",
        "            .map(_parse_function, num_parallel_calls=tf.data.AUTOTUNE)\\\n",
        "            .shuffle(1024)\\\n",
        "            .batch(batch_size)\\\n",
        "            .prefetch(tf.data.AUTOTUNE)\n",
        "\n",
        "    train_dataset = make_dataset(train_tfrecord, config['batch_size'])\n",
        "    val_dataset = make_dataset(val_tfrecord, config['batch_size'])\n",
        "\n",
        "    print(\"--- 모델 구축 중 ---\")\n",
        "    lco_feat, other_feat = build_main_feature_extractors(config['input_seq_len'], config['d_model'])\n",
        "    fourier_model = build_fourier_correction_model(\n",
        "        config['lookback_days'] * DAY_MINUTES, config['num_harmonics'], config['lstm_units'])\n",
        "    encoder = CircadianEncoder(\n",
        "        num_layers=config['num_layers'], d_model=config['d_model'],\n",
        "        num_heads=config['num_heads'], dff=config['dff'], rate=config['rate'])\n",
        "    decoder = BloodPressureDecoder(\n",
        "        decoder_lstm_units=config['decoder_lstm_units'], prediction_horizon=config['prediction_horizon'],\n",
        "        num_bp_features=config['num_bp_features'], d_model=config['d_model'], rate=config['rate'])\n",
        "    realtime_model = RealtimeBPModel(lco_feat, other_feat, fourier_model, encoder, decoder, config)\n",
        "\n",
        "    optimizer = Adam(learning_rate=config['learning_rate'])\n",
        "    mse_loss_fn = tf.keras.losses.MeanSquaredError()\n",
        "    mae_metric = tf.keras.metrics.MeanAbsoluteError()\n",
        "\n",
        "    @tf.function\n",
        "    def train_step(x, y):\n",
        "        with tf.GradientTape() as tape:\n",
        "            y_pred = realtime_model(x, y=y, training=True)\n",
        "            main_loss = mse_loss_fn(y, y_pred)\n",
        "            total_loss = main_loss + sum(realtime_model.losses)\n",
        "            # scaled_loss를 수동으로 계산할 필요가 없습니다.\n",
        "            # total_loss가 자동으로 스케일링됩니다.\n",
        "\n",
        "        # tape.gradient가 그래디언트를 자동으로 언스케일링합니다.\n",
        "        gradients = tape.gradient(total_loss, realtime_model.trainable_variables)\n",
        "        optimizer.apply_gradients(zip(gradients, realtime_model.trainable_variables))\n",
        "\n",
        "        mae_metric.update_state(y, y_pred)\n",
        "        # main_loss는 디버깅/로깅용이므로 그대로 반환해도 좋습니다.\n",
        "        return total_loss, main_loss\n",
        "\n",
        "    @tf.function\n",
        "    def val_step(x, y):\n",
        "        y_pred = realtime_model(x, training=False)\n",
        "        loss = mse_loss_fn(y, y_pred)\n",
        "        mae_metric.update_state(y, y_pred)\n",
        "        return loss\n",
        "\n",
        "    history = {'train_loss': [], 'val_loss': [], 'train_mae': [], 'val_mae': []}\n",
        "    best_val_loss = float('inf')\n",
        "    model_save_path = os.path.join(OUTPUT_DIR, \"best_realtime_bp_model.weights.h5\")\n",
        "\n",
        "    for epoch in range(config['epochs']):\n",
        "        print(f\"\\n{'='*60}\\nEpoch {epoch + 1}/{config['epochs']}\\n{'='*60}\")\n",
        "        progbar = tf.keras.utils.Progbar(num_train_samples // config['batch_size'], stateful_metrics=['train_loss', 'train_mae'])\n",
        "        mae_metric.reset_state()\n",
        "\n",
        "        for i, (x, y) in enumerate(train_dataset):\n",
        "            total_loss, main_loss = train_step(x, y)\n",
        "            progbar.update(i + 1, values=[('train_loss', total_loss), ('main_loss', main_loss), ('train_mae', mae_metric.result())])\n",
        "\n",
        "        history['train_loss'].append(total_loss.numpy())\n",
        "        history['train_mae'].append(mae_metric.result().numpy())\n",
        "        print(f\"\\n학습 결과: Loss={total_loss.numpy():.4f}, MAE={mae_metric.result().numpy():.4f} mmHg\")\n",
        "\n",
        "        mae_metric.reset_state()\n",
        "        val_losses = []\n",
        "        for x, y in val_dataset:\n",
        "            val_losses.append(val_step(x, y))\n",
        "\n",
        "        val_loss = np.mean(val_losses)\n",
        "        val_mae = mae_metric.result().numpy()\n",
        "        history['val_loss'].append(val_loss)\n",
        "        history['val_mae'].append(val_mae)\n",
        "        print(f\"검증 결과: Loss={val_loss:.4f}, MAE={val_mae:.4f} mmHg\")\n",
        "\n",
        "        if val_loss < best_val_loss:\n",
        "            print(f\"✓ Validation loss 개선 ({best_val_loss:.4f} --> {val_loss:.4f}). 모델 저장...\")\n",
        "            best_val_loss = val_loss\n",
        "            realtime_model.save_weights(model_save_path)\n",
        "        else:\n",
        "            print(f\"✗ Validation loss 개선 없음 ({best_val_loss:.4f})\")\n",
        "\n",
        "    print(f\"\\n--- 학습 완료 --- Best validation loss: {best_val_loss:.4f}\")\n",
        "    realtime_model.load_weights(model_save_path)\n",
        "    return realtime_model, val_dataset, history\n",
        "\n",
        "# =============================================================================\n",
        "# 7. 예측 및 시각화\n",
        "# =============================================================================\n",
        "def predict_future_bp(model, person_data, prediction_idx, person_markers,\n",
        "                     baseline_trajectory, activity_plan, config):\n",
        "    \"\"\"\n",
        "    미래 24시간 혈압 예측 및 시각화에 필요한 모든 데이터 반환\n",
        "    \"\"\"\n",
        "    print(f\"\\n--- 미래 24시간 혈압 예측 시작 (시점: {person_data.iloc[prediction_idx]['timestamp']}) ---\")\n",
        "\n",
        "    # 스케일러 및 모델 구성 요소 로드\n",
        "    feature_scaler = joblib.load(os.path.join(OUTPUT_DIR, 'feature_scaler.gz'))\n",
        "    fourier_model = model.fourier_correction_model\n",
        "    fourier_layer = FourierTrajectoryLayer(config['num_harmonics'])\n",
        "\n",
        "    # --- 1. 모델 입력 생성 (기존 로직과 유사) ---\n",
        "    main_seq_start_idx = prediction_idx - config['input_seq_len']\n",
        "    num_total_days = config['lookback_days'] + (config['input_seq_len'] // DAY_MINUTES)\n",
        "    time_offset = main_seq_start_idx % DAY_MINUTES\n",
        "    slice_start_midnight = main_seq_start_idx - time_offset\n",
        "    slice_end_midnight = slice_start_midnight + num_total_days * DAY_MINUTES\n",
        "\n",
        "    if slice_start_midnight < 0:\n",
        "        raise ValueError(\"예측에 필요한 과거 데이터가 부족합니다.\")\n",
        "\n",
        "    full_slice_df = person_data.iloc[slice_start_midnight:slice_end_midnight].copy()\n",
        "    feature_cols = [c for c in feature_scaler.feature_names_in_ if c in full_slice_df.columns]\n",
        "    full_slice_df[feature_cols] = feature_scaler.transform(full_slice_df[feature_cols])\n",
        "\n",
        "    # --- 2. 모델 예측 수행 ---\n",
        "    model_input = {}\n",
        "    main_cnn_other_cols = {\n",
        "        'input_lux': ['lux'], 'input_sleep': ['is_sleeping'],\n",
        "        'input_body1': ['heart_rate', 'hrv', 'respiration_rate'],\n",
        "        'input_body2': ['skin_temp'], 'input_zeit1': ['meal_event'],\n",
        "        'input_zeit2': ['exercise_event'], 'input_zeit3': ['ambient_temp'],\n",
        "    }\n",
        "    for key, cols in main_cnn_other_cols.items():\n",
        "        model_input[key] = tf.constant(full_slice_df[cols].values[np.newaxis, ...], dtype=tf.float32)\n",
        "        model_input[key.replace(\"input\", \"corr_input\")] = model_input[key]\n",
        "\n",
        "    model_input['baseline_inputs'] = tf.constant(full_slice_df[['x_base', 'xc_base']].values[np.newaxis, ...], dtype=tf.float32)\n",
        "    model_input['time_offset'] = tf.constant([[time_offset]], dtype=tf.int32)\n",
        "    model_input['prediction_minute_in_day'] = tf.constant([[prediction_idx % DAY_MINUTES]], dtype=tf.int32)\n",
        "    selection_start_abs = main_seq_start_idx\n",
        "    selection_end_abs = prediction_idx - (2 * DAY_MINUTES)\n",
        "    model_input['past_info_indices'] = tf.constant(generate_past_info_indices_optimized(\n",
        "        person_markers, selection_start_abs, selection_end_abs, config\n",
        "    )[np.newaxis, ...], dtype=tf.int64)\n",
        "\n",
        "    d_day_trajectory, future_lco = generate_d_day_and_future_lco(\n",
        "        person_data, prediction_idx, baseline_trajectory, activity_plan, PARAMS, PREDICTION_HORIZON)\n",
        "    model_input['d_day_lco'] = tf.constant(d_day_trajectory[np.newaxis, ...], dtype=tf.float32)\n",
        "    model_input['future_lco'] = tf.constant(future_lco[np.newaxis, ...], dtype=tf.float32)\n",
        "    future_activities_arr = np.stack([activity_plan['sleep'], activity_plan['meal'], activity_plan['exercise']], axis=-1)\n",
        "    model_input['future_activities'] = tf.constant(future_activities_arr[np.newaxis, ...], dtype=tf.float32)\n",
        "\n",
        "    bp_predictions = model(model_input, training=False)\n",
        "    predicted_bp_np = bp_predictions[0].numpy()\n",
        "    predicted_bp_np[:, 0] = np.clip(predicted_bp_np[:, 0], 80, 200)\n",
        "    predicted_bp_np[:, 1] = np.clip(predicted_bp_np[:, 1], 50, 120)\n",
        "    print(\"--- 혈압 예측 완료 ---\")\n",
        "\n",
        "    # --- 3. 시각화를 위한 데이터 준비 ---\n",
        "    # 시간 축 (과거 48시간 + 미래 24시간)\n",
        "    total_plot_minutes = 48 * 60 + PREDICTION_HORIZON\n",
        "    plot_start_time = person_data.iloc[prediction_idx]['timestamp'] - timedelta(minutes=48*60)\n",
        "    time_axis = pd.to_datetime([plot_start_time + timedelta(minutes=i) for i in range(total_plot_minutes)])\n",
        "\n",
        "    # 혈압 데이터\n",
        "    past_bp_df = person_data.iloc[prediction_idx - 48*60 : prediction_idx]\n",
        "    past_bp = past_bp_df[['systolic_bp', 'diastolic_bp']].values\n",
        "    future_actual_bp = person_data.iloc[prediction_idx : prediction_idx + PREDICTION_HORIZON][['systolic_bp', 'diastolic_bp']].values\n",
        "\n",
        "    # LCO 궤적 데이터 (72시간)\n",
        "    lco_plot_start_idx = prediction_idx - 48 * 60\n",
        "    lco_plot_end_idx = prediction_idx + PREDICTION_HORIZON\n",
        "    lco_baseline_72h = baseline_trajectory[lco_plot_start_idx:lco_plot_end_idx, :2]\n",
        "\n",
        "    # 보정된 LCO 궤적 계산\n",
        "    lookback_minutes = config['lookback_days'] * DAY_MINUTES\n",
        "\n",
        "    # Day -2, Day -1에 대한 보정값 계산\n",
        "    corrected_lco_72h = np.zeros_like(lco_baseline_72h)\n",
        "    anchor_points_list = []\n",
        "\n",
        "    for day_offset in [2, 1]: # D-2, D-1\n",
        "        day_start_abs = prediction_idx - day_offset * DAY_MINUTES\n",
        "        corr_input_start = day_start_abs - lookback_minutes\n",
        "\n",
        "        if corr_input_start < 0:\n",
        "             # 데이터 부족 시 보정 없음\n",
        "            day_slice_in_72h = (2 - day_offset) * DAY_MINUTES\n",
        "            corrected_lco_72h[day_slice_in_72h:day_slice_in_72h+DAY_MINUTES] = lco_baseline_72h[day_slice_in_72h:day_slice_in_72h+DAY_MINUTES]\n",
        "            anchor_points_list.append(np.zeros(4))\n",
        "            continue\n",
        "\n",
        "        corr_input_df = person_data.iloc[corr_input_start:day_start_abs].copy()\n",
        "        corr_input_df[feature_cols] = feature_scaler.transform(corr_input_df[feature_cols])\n",
        "\n",
        "        fourier_inputs_list = [tf.constant(corr_input_df[cols].values[np.newaxis, ...], dtype=tf.float32) for key, cols in main_cnn_other_cols.items()]\n",
        "\n",
        "        correction_params = fourier_model(fourier_inputs_list, training=False)\n",
        "        daily_correction_curve = fourier_layer(correction_params)[0].numpy()\n",
        "\n",
        "        num_coeffs_per_traj = 1 + 2 * config['num_harmonics']\n",
        "        num_total_coeffs = num_coeffs_per_traj * 2\n",
        "        endpoints = correction_params[0, num_total_coeffs:].numpy()\n",
        "        anchor_points_list.append(endpoints)\n",
        "\n",
        "        day_slice_in_72h = (2 - day_offset) * DAY_MINUTES\n",
        "        corrected_lco_72h[day_slice_in_72h:day_slice_in_72h+DAY_MINUTES] = lco_baseline_72h[day_slice_in_72h:day_slice_in_72h+DAY_MINUTES] + daily_correction_curve\n",
        "\n",
        "    # [수정-1] '완결 로직': Day-1 보정 궤적의 마지막 부분을 D-day 시뮬레이션 결과로 덮어써서 궤적 연속성 확보\n",
        "    prediction_minute_in_day = prediction_idx % DAY_MINUTES\n",
        "    if prediction_minute_in_day > 0 and len(d_day_trajectory) > 0:\n",
        "        # 72시간 배열에서 덮어쓸 위치 계산 (예측 시점(인덱스 2880) 바로 앞)\n",
        "        dest_start_idx = 2880 - len(d_day_trajectory)\n",
        "        dest_end_idx = 2880\n",
        "        if dest_start_idx >= 0:\n",
        "             corrected_lco_72h[dest_start_idx:dest_end_idx] = d_day_trajectory[:, :2]\n",
        "\n",
        "    # [수정-2] 미래 24시간 부분을 'future_lco' 시뮬레이션 결과로 채우기\n",
        "    future_start_idx = 2880\n",
        "    future_end_idx = future_start_idx + PREDICTION_HORIZON # 2880 + 1440 = 4320\n",
        "    if len(future_lco) == PREDICTION_HORIZON:\n",
        "        corrected_lco_72h[future_start_idx:future_end_idx] = future_lco\n",
        "    else: # 혹시 모를 길이 불일치 처리\n",
        "        len_to_copy = min(len(future_lco), PREDICTION_HORIZON)\n",
        "        corrected_lco_72h[future_start_idx : future_start_idx + len_to_copy] = future_lco[:len_to_copy]\n",
        "\n",
        "    # 활동 데이터 (72시간)\n",
        "    past_activities_df = person_data.iloc[prediction_idx - 48*60 : prediction_idx]\n",
        "    past_sleep = past_activities_df['is_sleeping'].values\n",
        "    past_meal = past_activities_df['meal_event'].values\n",
        "    past_exercise = past_activities_df['exercise_event'].values\n",
        "\n",
        "    activities_72h = {\n",
        "        'sleep': np.concatenate([past_sleep, activity_plan['sleep']]),\n",
        "        'meal': np.concatenate([past_meal, activity_plan['meal']]),\n",
        "        'exercise': np.concatenate([past_exercise, activity_plan['exercise']])\n",
        "    }\n",
        "\n",
        "    # 최종 plot_data 딕셔너리 구성\n",
        "    plot_data = {\n",
        "        'time_axis': time_axis,\n",
        "        'past_bp': past_bp,\n",
        "        'future_actual_bp': future_actual_bp,\n",
        "        'predicted_bp': predicted_bp_np,\n",
        "        'lco_baseline': lco_baseline_72h,\n",
        "        'lco_corrected': corrected_lco_72h,\n",
        "        'anchor_points': anchor_points_list,\n",
        "        'activities': activities_72h\n",
        "    }\n",
        "\n",
        "    return predicted_bp_np, plot_data\n",
        "\n",
        "def plot_enhanced_prediction_results(plot_data, prediction_time, output_dir):\n",
        "    \"\"\"\n",
        "    향상된 혈압 예측 결과 시각화 함수 (과거 48시간 + 미래 24시간)\n",
        "    1. 혈압 예측 (72h)\n",
        "    2. LCO 궤적 (베이스라인 vs 보정, 72h)\n",
        "    3. 활동 계획 (72h)\n",
        "    4. LCO 상태 평면 (24h * 3개)\n",
        "    \"\"\"\n",
        "    print(\"--- 향상된 예측 결과 시각화 시작 ---\")\n",
        "\n",
        "    # 데이터 추출\n",
        "    time_axis = plot_data['time_axis']\n",
        "    past_bp = plot_data['past_bp']\n",
        "    future_actual_bp = plot_data['future_actual_bp']\n",
        "    predicted_bp = plot_data['predicted_bp']\n",
        "\n",
        "    lco_baseline = plot_data['lco_baseline']\n",
        "    lco_corrected = plot_data['lco_corrected']\n",
        "    anchor_points = plot_data['anchor_points']\n",
        "\n",
        "    activities = plot_data['activities']\n",
        "\n",
        "    # 플롯 스타일 및 레이아웃 설정\n",
        "    plt.style.use('seaborn-v0_8-whitegrid')\n",
        "    fig = plt.figure(figsize=(18, 22))\n",
        "    gs = fig.add_gridspec(4, 3, height_ratios=[3, 2, 1, 2], hspace=0.4, wspace=0.3)\n",
        "\n",
        "    # --- 1. 혈압 그래프 (72시간) ---\n",
        "    ax_bp = fig.add_subplot(gs[0, :])\n",
        "    # 과거 48시간 실제 혈압\n",
        "    ax_bp.plot(time_axis[:-PREDICTION_HORIZON], past_bp[:, 0], 'b-', label='Past Systolic (Actual)', linewidth=1.5, alpha=0.7)\n",
        "    ax_bp.plot(time_axis[:-PREDICTION_HORIZON], past_bp[:, 1], 'c-', label='Past Diastolic (Actual)', linewidth=1.5, alpha=0.7)\n",
        "    # 미래 24시간 실제 혈압\n",
        "    if future_actual_bp is not None:\n",
        "        ax_bp.plot(time_axis[-PREDICTION_HORIZON:], future_actual_bp[:, 0], 'b--', label='Future Systolic (Actual)', linewidth=1.5)\n",
        "        ax_bp.plot(time_axis[-PREDICTION_HORIZON:], future_actual_bp[:, 1], 'c--', label='Future Diastolic (Actual)', linewidth=1.5)\n",
        "    # 미래 24시간 예측 혈압\n",
        "    ax_bp.plot(time_axis[-PREDICTION_HORIZON:], predicted_bp[:, 0], 'r-', label='Predicted Systolic', linewidth=2.5)\n",
        "    ax_bp.plot(time_axis[-PREDICTION_HORIZON:], predicted_bp[:, 1], 'm-', label='Predicted Diastolic', linewidth=2)\n",
        "\n",
        "    ax_bp.axvline(x=prediction_time, color='k', linestyle=':', linewidth=2, label='Prediction Start')\n",
        "    ax_bp.set_title(f'72-Hour Blood Pressure Profile (Prediction from: {prediction_time.strftime(\"%Y-%m-%d %H:%M\")})', fontsize=16)\n",
        "    ax_bp.set_ylabel('Blood Pressure (mmHg)', fontsize=12)\n",
        "    ax_bp.legend(fontsize=10, loc='upper left')\n",
        "    ax_bp.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))\n",
        "\n",
        "    # --- 2. LCO 궤적 그래프 (72시간) ---\n",
        "    ax_lco = fig.add_subplot(gs[1, :], sharex=ax_bp)\n",
        "    # 베이스라인 (보정 전)\n",
        "    ax_lco.plot(time_axis, lco_baseline[:, 0], 'g:', label='Baseline x (uncorrected)', alpha=0.8)\n",
        "    ax_lco.plot(time_axis, lco_baseline[:, 1], 'orange', linestyle=':', label='Baseline xc (uncorrected)', alpha=0.8)\n",
        "    # 보정된 궤적\n",
        "    ax_lco.plot(time_axis, lco_corrected[:, 0], 'g-', label='Corrected x', linewidth=2)\n",
        "    ax_lco.plot(time_axis, lco_corrected[:, 1], 'orange', label='Corrected xc', linewidth=2)\n",
        "    # 앵커 포인트\n",
        "    if anchor_points is not None:\n",
        "        anchor_times = [prediction_time - timedelta(minutes=48*60), prediction_time - timedelta(minutes=24*60)]\n",
        "        anchor_times_end = [prediction_time - timedelta(minutes=24*60), prediction_time]\n",
        "        ax_lco.scatter(anchor_times, [p[0] for p in anchor_points], c='red', s=100, zorder=5, marker='o', label='Anchor Start')\n",
        "        ax_lco.scatter(anchor_times, [p[2] for p in anchor_points], c='blue', s=100, zorder=5, marker='o') # xc\n",
        "        ax_lco.scatter(anchor_times_end, [p[1] for p in anchor_points], c='red', s=100, zorder=5, marker='x', label='Anchor End')\n",
        "        ax_lco.scatter(anchor_times_end, [p[3] for p in anchor_points], c='blue', s=100, zorder=5, marker='x') # xc\n",
        "\n",
        "\n",
        "    ax_lco.set_title('LCO Trajectory (Baseline vs. Corrected)', fontsize=16)\n",
        "    ax_lco.set_ylabel('LCO State', fontsize=12)\n",
        "    ax_lco.legend(fontsize=10, loc='upper left')\n",
        "\n",
        "    # --- 3. 활동 계획 (72시간) ---\n",
        "    ax_activity = fig.add_subplot(gs[2, :], sharex=ax_bp)\n",
        "    ax_activity.fill_between(time_axis, 0, activities['sleep'], color='darkslateblue', alpha=0.7, label='Sleep', step='post')\n",
        "    ax_activity.fill_between(time_axis, 0, activities['meal'], color='goldenrod', alpha=0.7, label='Meal', step='post')\n",
        "    ax_activity.fill_between(time_axis, 0, activities['exercise'], color='darkgreen', alpha=0.7, label='Exercise', step='post')\n",
        "    ax_activity.set_ylabel('Activities', fontsize=12)\n",
        "    ax_activity.set_yticks([])\n",
        "    ax_activity.legend(fontsize=10, loc='upper left')\n",
        "    ax_activity.set_xlabel('Time', fontsize=12)\n",
        "\n",
        "    # --- 4. LCO 상태 평면 (3일) ---\n",
        "    day_indices = [(0, 48*60), (48*60, 24*60), (24*60, 0)]\n",
        "    day_labels = ['Day -2', 'Day -1', 'Prediction Day (D-day)']\n",
        "\n",
        "    for i, (start_offset, end_offset) in enumerate(day_indices):\n",
        "        ax_phase = fig.add_subplot(gs[3, i])\n",
        "        start_idx = len(lco_corrected) - start_offset * 60 - PREDICTION_HORIZON\n",
        "        end_idx = len(lco_corrected) - end_offset * 60 - PREDICTION_HORIZON\n",
        "\n",
        "        # Day -2, Day -1\n",
        "        if i < 2:\n",
        "            start_idx = i * DAY_MINUTES\n",
        "            end_idx = (i + 1) * DAY_MINUTES\n",
        "\n",
        "        # D-day\n",
        "        else:\n",
        "            start_idx = 2 * DAY_MINUTES\n",
        "            end_idx = 3 * DAY_MINUTES\n",
        "\n",
        "\n",
        "        day_lco = lco_corrected[start_idx:end_idx]\n",
        "\n",
        "        ax_phase.plot(day_lco[:, 0], day_lco[:, 1], 'k-', label='Trajectory')\n",
        "        ax_phase.scatter(day_lco[0, 0], day_lco[0, 1], c='g', s=100, zorder=5, marker='o', label='Start')\n",
        "        ax_phase.scatter(day_lco[-1, 0], day_lco[-1, 1], c='r', s=100, zorder=5, marker='s', label='End')\n",
        "        ax_phase.set_title(f'{day_labels[i]} Phase Space', fontsize=14)\n",
        "        ax_phase.set_xlabel('x', fontsize=11)\n",
        "        ax_phase.set_ylabel('xc', fontsize=11)\n",
        "        ax_phase.legend(fontsize=9)\n",
        "        ax_phase.axis('equal')\n",
        "\n",
        "    plt.suptitle('Comprehensive Prediction Analysis', fontsize=20, y=0.99)\n",
        "    fig.tight_layout(rect=[0, 0, 1, 0.98])\n",
        "\n",
        "    save_path = os.path.join(output_dir, \"enhanced_bp_prediction.png\")\n",
        "    plt.savefig(save_path)\n",
        "    print(f\"향상된 예측 그래프 저장 완료: {save_path}\")\n",
        "    plt.show()\n",
        "    plt.close()\n",
        "\n",
        "def plot_learning_curves(history, output_dir):\n",
        "    \"\"\"학습 곡선 시각화\"\"\"\n",
        "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n",
        "    plt.style.use('seaborn-v0_8-whitegrid')\n",
        "\n",
        "    ax1.plot(history['train_loss'], label='Training Loss')\n",
        "    ax1.plot(history['val_loss'], label='Validation Loss')\n",
        "    ax1.set_title('Model Loss (MSE)', fontsize=14)\n",
        "    ax1.set_xlabel('Epoch', fontsize=12)\n",
        "    ax1.set_ylabel('Loss', fontsize=12)\n",
        "    ax1.legend()\n",
        "\n",
        "    ax2.plot(history['train_mae'], label='Training MAE')\n",
        "    ax2.plot(history['val_mae'], label='Validation MAE')\n",
        "    ax2.set_title('Mean Absolute Error (mmHg)', fontsize=14)\n",
        "    ax2.set_xlabel('Epoch', fontsize=12)\n",
        "    ax2.set_ylabel('MAE', fontsize=12)\n",
        "    ax2.legend()\n",
        "\n",
        "    plt.tight_layout()\n",
        "    save_path = os.path.join(output_dir, \"learning_curves.png\")\n",
        "    plt.savefig(save_path)\n",
        "    print(f\"학습 곡선 저장 완료: {save_path}\")\n",
        "    plt.close()\n",
        "\n",
        "# =============================================================================\n",
        "# 8. 메인 실행 함수\n",
        "# =============================================================================\n",
        "def run_training_pipeline(config):\n",
        "    \"\"\"전체 학습 파이프라인 실행\"\"\"\n",
        "    print(\"--- 실시간 혈압 예측 AI 학습 파이프라인 시작 ---\")\n",
        "    os.makedirs(OUTPUT_DIR, exist_ok=True)\n",
        "\n",
        "    # 1. 데이터 로딩\n",
        "    df_all, person_ids = load_all_biometric_data_with_bp()\n",
        "    df_all['lux'] = df_all['lux'].clip(upper=10000)\n",
        "    activity_plans = load_future_activity_plans()\n",
        "\n",
        "    # 2. 개인별 데이터 처리 및 기준 궤도 생성\n",
        "    print(\"\\n--- 개인별 데이터 처리 및 기준 궤도 생성 시작 ---\")\n",
        "    processed_data_frames = []\n",
        "    baseline_trajectories = {}\n",
        "    person_markers_dict = {}\n",
        "\n",
        "    with tqdm(person_ids, desc=\"개인별 처리\") as pbar:\n",
        "        for person_id in pbar:\n",
        "            pbar.set_description(f\"Person {person_id} 처리 중\")\n",
        "            person_df = df_all[df_all['person_id'] == person_id].copy().sort_values('timestamp').reset_index(drop=True)\n",
        "            person_df['integrated_lux'] = person_df['lux'].rolling(window=30, min_periods=1, center=True).mean()\n",
        "\n",
        "            pbar.set_postfix_str(\"기준 궤도 생성 중...\")\n",
        "            baseline_trajectory = generate_daily_baseline_trajectories_for_person(person_df, PARAMS, OUTPUT_DIR, pbar=pbar)\n",
        "            baseline_trajectories[person_id] = baseline_trajectory\n",
        "            person_df[['x_base', 'xc_base', 'n_base']] = baseline_trajectory[:len(person_df)]\n",
        "\n",
        "            pbar.set_postfix_str(\"마커 계산 중...\")\n",
        "            person_markers_dict[person_id] = precompute_all_markers_for_person(person_df)\n",
        "            processed_data_frames.append(person_df)\n",
        "\n",
        "    df_all_processed = pd.concat(processed_data_frames, ignore_index=True)\n",
        "\n",
        "    baseline_cache_path = os.path.join(OUTPUT_DIR, 'baseline_trajectories.pkl')\n",
        "    with open(baseline_cache_path, 'wb') as f: pickle.dump(baseline_trajectories, f)\n",
        "    print(f\"\\n기준 궤도 캐시 저장 완료: {baseline_cache_path}\")\n",
        "\n",
        "    # 3. 스케일링\n",
        "    print(\"\\n--- 데이터 스케일링 ---\")\n",
        "    feature_cols = ['lux', 'is_sleeping', 'heart_rate', 'hrv', 'respiration_rate',\n",
        "                    'skin_temp', 'meal_event', 'exercise_event', 'ambient_temp',\n",
        "                    'x_base', 'xc_base', 'n_base']\n",
        "    feature_scaler = StandardScaler()\n",
        "    feature_scaler.fit(df_all_processed[feature_cols])\n",
        "    df_all_scaled = df_all_processed.copy()\n",
        "    df_all_scaled[feature_cols] = feature_scaler.transform(df_all_processed[feature_cols])\n",
        "    joblib.dump(feature_scaler, os.path.join(OUTPUT_DIR, 'feature_scaler.gz'))\n",
        "\n",
        "    # 4. 샘플 준비 및 분할\n",
        "    samples = prepare_realtime_samples(df_all_scaled, activity_plans, person_ids, config)\n",
        "    random.shuffle(samples)\n",
        "    train_end = int(len(samples) * TRAIN_RATIO)\n",
        "    val_end = train_end + int(len(samples) * VALIDATION_RATIO)\n",
        "    train_samples = samples[:train_end]\n",
        "    val_samples = samples[train_end:val_end]\n",
        "    print(f\"\\n학습 샘플: {len(train_samples)}, 검증 샘플: {len(val_samples)}\")\n",
        "\n",
        "    # 5. TFRecord 생성\n",
        "    train_tfrecord_path = os.path.join(OUTPUT_DIR, \"train_realtime.tfrecord\")\n",
        "    val_tfrecord_path = os.path.join(OUTPUT_DIR, \"val_realtime.tfrecord\")\n",
        "    create_realtime_tfrecords(df_all_scaled, train_samples, config, train_tfrecord_path, person_markers_dict, baseline_trajectories)\n",
        "    create_realtime_tfrecords(df_all_scaled, val_samples, config, val_tfrecord_path, person_markers_dict, baseline_trajectories)\n",
        "\n",
        "    # 6. 모델 학습\n",
        "    model, val_dataset, history = train_and_evaluate_realtime(\n",
        "        train_tfrecord_path, val_tfrecord_path, len(train_samples), len(val_samples), config\n",
        "    )\n",
        "\n",
        "    # 7. 결과 시각화\n",
        "    plot_learning_curves(history, OUTPUT_DIR)\n",
        "    print(\"\\n\\n\" + \"=\"*70 + \"\\n    실시간 혈압 예측 AI 학습 파이프라인 완료\\n\" + \"=\"*70)\n",
        "    return model, df_all_processed, person_markers_dict, baseline_trajectories\n",
        "\n",
        "def run_training_only(config):\n",
        "    \"\"\"TFRecord가 이미 존재할 때 학습만 실행하는 함수\"\"\"\n",
        "    print(\"\\n\" + \"=\"*70 + \"\\n  Training Only Mode: 기존 TFRecord로 학습만 실행\\n\" + \"=\"*70 + \"\\n\")\n",
        "\n",
        "    # 1. TFRecord 파일 경로 확인\n",
        "    train_tfrecord_path = os.path.join(OUTPUT_DIR, \"train_realtime.tfrecord\")\n",
        "    val_tfrecord_path = os.path.join(OUTPUT_DIR, \"val_realtime.tfrecord\")\n",
        "\n",
        "    if not os.path.exists(train_tfrecord_path) or not os.path.exists(val_tfrecord_path):\n",
        "        print(f\"오류: TFRecord 파일을 찾을 수 없습니다. 먼저 '--mode train' 모드를 실행해주세요.\")\n",
        "        return\n",
        "\n",
        "    # 2. TFRecord 파일에서 샘플 개수 세기 (파일을 다시 만들지 않고 개수만 확인)\n",
        "    print(\"기존 TFRecord 파일에서 샘플 개수를 세는 중...\")\n",
        "    num_train_samples = sum(1 for _ in tf.data.TFRecordDataset(train_tfrecord_path))\n",
        "    num_val_samples = sum(1 for _ in tf.data.TFRecordDataset(val_tfrecord_path))\n",
        "    print(f\"확인된 샘플: 학습 {num_train_samples}개, 검증 {num_val_samples}개\")\n",
        "\n",
        "    if num_train_samples == 0 or num_val_samples == 0:\n",
        "        print(\"오류: TFRecord 파일이 비어있습니다. '--mode train'으로 다시 생성해주세요.\")\n",
        "        return\n",
        "\n",
        "    # 3. 모델 학습 및 평가 함수 호출\n",
        "    model, val_dataset, history = train_and_evaluate_realtime(\n",
        "        train_tfrecord_path, val_tfrecord_path, num_train_samples, num_val_samples, config\n",
        "    )\n",
        "\n",
        "    # 4. 결과 시각화\n",
        "    plot_learning_curves(history, OUTPUT_DIR)\n",
        "    print(\"\\n\\n\" + \"=\"*70 + \"\\n    'train_only' 모드 학습 완료\\n\" + \"=\"*70)\n",
        "    return model\n",
        "\n",
        "def run_prediction_demo(config):\n",
        "    \"\"\"실시간 혈압 예측 데모 실행\"\"\"\n",
        "    print(\"\\n--- 실시간 혈압 예측 데모 시작 ---\")\n",
        "    model_weights_path = os.path.join(OUTPUT_DIR, \"best_realtime_bp_model.weights.h5\")\n",
        "    if not os.path.exists(model_weights_path):\n",
        "        raise FileNotFoundError(f\"모델 파일({model_weights_path})을 찾을 수 없습니다. 'train' 모드를 먼저 실행해주세요.\")\n",
        "\n",
        "    # 모델 재구성\n",
        "    lco_feat, other_feat = build_main_feature_extractors(config['input_seq_len'], config['d_model'])\n",
        "    fourier_model = build_fourier_correction_model(config['lookback_days'] * DAY_MINUTES, config['num_harmonics'], config['lstm_units'])\n",
        "    encoder = CircadianEncoder(num_layers=config['num_layers'], d_model=config['d_model'], num_heads=config['num_heads'], dff=config['dff'], rate=config['rate'])\n",
        "    decoder = BloodPressureDecoder(decoder_lstm_units=config['decoder_lstm_units'], prediction_horizon=config['prediction_horizon'], num_bp_features=config['num_bp_features'], d_model=config['d_model'], rate=config['rate'])\n",
        "    loaded_model = RealtimeBPModel(lco_feat, other_feat, fourier_model, encoder, decoder, config)\n",
        "\n",
        "    # 더미 호출로 모델 빌드\n",
        "    dummy_x = { 'time_offset': tf.zeros((1, 1), dtype=tf.int32), 'prediction_minute_in_day': tf.zeros((1, 1), dtype=tf.int32) }\n",
        "    total_minutes = (config['lookback_days'] + config['input_seq_len'] // DAY_MINUTES) * DAY_MINUTES\n",
        "    main_keys = ['input_lux', 'input_sleep', 'input_body2', 'input_zeit1', 'input_zeit2', 'input_zeit3']\n",
        "    for key in main_keys: dummy_x[key] = dummy_x[key.replace('input', 'corr_input')] = tf.zeros((1, total_minutes, 1))\n",
        "    dummy_x['input_body1'] = dummy_x['corr_input_body1'] = tf.zeros((1, total_minutes, 3))\n",
        "    dummy_x['baseline_inputs'] = tf.zeros((1, total_minutes, 2))\n",
        "    dummy_x['past_info_indices'] = tf.zeros((1, config['num_markers_to_keep'] * 3), dtype=tf.int64)\n",
        "    dummy_x['d_day_lco'] = tf.zeros((1, 0, 2))\n",
        "    dummy_x['future_lco'] = tf.zeros((1, PREDICTION_HORIZON, 2))\n",
        "    dummy_x['future_activities'] = tf.zeros((1, PREDICTION_HORIZON, 3))\n",
        "    loaded_model(dummy_x, training=False)\n",
        "    loaded_model.load_weights(model_weights_path)\n",
        "    print(\"모델 로드 완료.\")\n",
        "\n",
        "    # 데이터 로딩\n",
        "    df_all, person_ids = load_all_biometric_data_with_bp()\n",
        "    test_person_id = random.choice(person_ids)\n",
        "    person_data = df_all[df_all['person_id'] == test_person_id].copy().sort_values('timestamp').reset_index(drop=True)\n",
        "    person_data['integrated_lux'] = person_data['lux'].rolling(window=30, min_periods=1, center=True).mean()\n",
        "\n",
        "    # 기준 궤도 및 마커 생성\n",
        "    baseline_cache_path = os.path.join(OUTPUT_DIR, 'baseline_trajectories.pkl')\n",
        "    if os.path.exists(baseline_cache_path):\n",
        "        with open(baseline_cache_path, 'rb') as f: baseline_trajectories = pickle.load(f)\n",
        "        if test_person_id in baseline_trajectories:\n",
        "            baseline_trajectory = baseline_trajectories[test_person_id]\n",
        "        else: # 캐시에 해당 사용자 데이터가 없을 경우 새로 생성\n",
        "            print(f\"경고: 캐시에 Person {test_person_id}의 기준 궤도가 없어 새로 생성합니다.\")\n",
        "            baseline_trajectory = generate_daily_baseline_trajectories_for_person(person_data, PARAMS, OUTPUT_DIR)\n",
        "    else:\n",
        "        baseline_trajectory = generate_daily_baseline_trajectories_for_person(person_data, PARAMS, OUTPUT_DIR)\n",
        "\n",
        "    person_data[['x_base', 'xc_base', 'n_base']] = baseline_trajectory[:len(person_data)]\n",
        "    person_markers = precompute_all_markers_for_person(person_data)\n",
        "\n",
        "    # 예측 가능한 시점 찾기\n",
        "    min_required_idx = (config['lookback_days'] + 2) * DAY_MINUTES # 과거 48시간을 봐야 하므로\n",
        "    test_idx = len(person_data) - PREDICTION_HORIZON - 1\n",
        "    if test_idx < min_required_idx:\n",
        "        raise ValueError(f\"Person {test_person_id}의 데이터가 예측 및 72시간 시각화를 수행하기에 충분하지 않습니다.\")\n",
        "\n",
        "    test_time = person_data.iloc[test_idx]['timestamp']\n",
        "    print(f\"\\n테스트 정보: Person ID: {test_person_id}, 예측 시점: {test_time}\")\n",
        "\n",
        "    # 활동 계획 (데모용 기본값)\n",
        "    activity_plan = generate_default_activity_plan(test_time, PREDICTION_HORIZON)\n",
        "\n",
        "    # 예측 및 시각화 데이터 생성\n",
        "    predicted_bp, plot_data = predict_future_bp(\n",
        "        loaded_model, person_data, test_idx, person_markers,\n",
        "        baseline_trajectory, activity_plan, config\n",
        "    )\n",
        "\n",
        "    # 새로운 시각화 함수 호출\n",
        "    plot_enhanced_prediction_results(plot_data, test_time, OUTPUT_DIR)\n",
        "\n",
        "# =============================================================================\n",
        "# 9. 메인 실행 블록\n",
        "# =============================================================================\n",
        "if __name__ == '__main__':\n",
        "    parser = argparse.ArgumentParser(description=\"실시간 혈압 예측 AI v0.22.1\")\n",
        "    # --- [수정된 부분 1] ---\n",
        "    # choices에 'train_only'를 추가합니다.\n",
        "    parser.add_argument('--mode', type=str, default='train', choices=['train', 'predict', 'train_only'],\n",
        "                        help=\"실행 모드: 'train' (전체), 'train_only' (학습만), 'predict' (예측 데모)\")\n",
        "\n",
        "    import sys\n",
        "    if 'ipykernel' in sys.modules:\n",
        "        # Colab/Jupyter 환경일 경우, 여기서 모드를 직접 지정할 수 있습니다.\n",
        "        # 디버깅 시 'train_only'로 변경해서 사용하세요.\n",
        "        args = parser.parse_args(['--mode', 'train_only'])\n",
        "    else:\n",
        "        # 커맨드 라인 환경일 경우, 기존 방식을 따릅니다.\n",
        "        args = parser.parse_args()\n",
        "\n",
        "    config = {\n",
        "        'batch_size': BATCH_SIZE, 'input_seq_len': INPUT_SEQUENCE_LENGTH,\n",
        "        'prediction_horizon': PREDICTION_HORIZON, 'num_bp_features': NUM_BP_FEATURES,\n",
        "        'lookback_days': PHASE_CORRECTION_LOOKBACK_DAYS, 'day_minutes': DAY_MINUTES,\n",
        "        'num_markers_to_keep': NUM_MARKERS_TO_KEEP, 'lambda_reg': LAMBDA_REG,\n",
        "        'lambda_cont': LAMBDA_CONT, 'lambda_anchor': LAMBDA_ANCHOR,\n",
        "        'lambda_boundary': LAMBDA_BOUNDARY, 'num_layers': NUM_LAYERS,\n",
        "        'd_model': D_MODEL, 'num_heads': NUM_HEADS, 'dff': DFF,\n",
        "        'rate': DROPOUT_RATE, 'epochs': EPOCHS, 'learning_rate': LEARNING_RATE,\n",
        "        'num_harmonics': NUM_FOURIER_HARMONICS, 'lstm_units': LSTM_UNITS,\n",
        "        'decoder_lstm_units': DECODER_LSTM_UNITS,\n",
        "    }\n",
        "\n",
        "    try:\n",
        "        # --- [수정된 부분 2] ---\n",
        "        # 'train_only' 모드에 대한 분기 처리\n",
        "        if args.mode == 'train':\n",
        "            print(\"\\n\" + \"=\"*70 + \"\\n  Training Mode: 전체 학습 파이프라인 실행\\n\" + \"=\"*70 + \"\\n\")\n",
        "            run_training_pipeline(config)\n",
        "        elif args.mode == 'train_only':\n",
        "            run_training_only(config)\n",
        "        elif args.mode == 'predict':\n",
        "            print(\"\\n\" + \"=\"*70 + \"\\n  Prediction Mode: 저장된 모델로 예측 실행\\n\" + \"=\"*70 + \"\\n\")\n",
        "            run_prediction_demo(config)\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"\\n치명적인 오류 발생: {e}\")\n",
        "        import traceback\n",
        "        traceback.print_exc()\n",
        "\n",
        "    print(\"\\n프로그램 실행이 완료되었습니다.\")\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "======================================================================\n",
            "  Training Only Mode: 기존 TFRecord로 학습만 실행\n",
            "======================================================================\n",
            "\n",
            "기존 TFRecord 파일에서 샘플 개수를 세는 중...\n",
            "확인된 샘플: 학습 9216개, 검증 1152개\n",
            "\n",
            "--- 실시간 혈압 예측 모델 학습 및 검증 시작 ---\n",
            "--- 모델 구축 중 ---\n",
            "\n",
            "============================================================\n",
            "Epoch 1/2\n",
            "============================================================\n",
            "\u001b[1m1152/1152\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m806s\u001b[0m 674ms/step - train_loss: 55.8368 - main_loss: 400.0611 - train_mae: 9.2911\n",
            "\n",
            "학습 결과: Loss=55.8368, MAE=9.2911 mmHg\n",
            "검증 결과: Loss=35.6516, MAE=3.9481 mmHg\n",
            "✓ Validation loss 개선 (inf --> 35.6516). 모델 저장...\n",
            "\n",
            "============================================================\n",
            "Epoch 2/2\n",
            "============================================================\n",
            "\u001b[1m1152/1152\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m780s\u001b[0m 676ms/step - train_loss: 48.7003 - main_loss: 29.5711 - train_mae: 4.1538\n",
            "\n",
            "학습 결과: Loss=48.7003, MAE=4.1538 mmHg\n",
            "검증 결과: Loss=35.1548, MAE=4.2007 mmHg\n",
            "✓ Validation loss 개선 (35.6516 --> 35.1548). 모델 저장...\n",
            "\n",
            "--- 학습 완료 --- Best validation loss: 35.1548\n",
            "학습 곡선 저장 완료: /content/drive/MyDrive/real_time_bp_prediction_output_v0.22.1/learning_curves.png\n",
            "\n",
            "\n",
            "======================================================================\n",
            "    'train_only' 모드 학습 완료\n",
            "======================================================================\n",
            "\n",
            "프로그램 실행이 완료되었습니다.\n"
          ]
        }
      ],
      "execution_count": 5,
      "metadata": {
        "id": "P49pMBYJDNPm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ceef767d-516d-4fcf-bda7-5a7d561f4845"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================================================\n",
        "# 9. 메인 실행 블록\n",
        "# =============================================================================\n",
        "if __name__ == '__main__':\n",
        "    parser = argparse.ArgumentParser(description=\"실시간 혈압 예측 AI v0.22.1\")\n",
        "    # --- [수정된 부분 1] ---\n",
        "    # choices에 'train_only'를 추가합니다.\n",
        "    parser.add_argument('--mode', type=str, default='train', choices=['train', 'predict', 'train_only'],\n",
        "                        help=\"실행 모드: 'train' (전체), 'train_only' (학습만), 'predict' (예측 데모)\")\n",
        "\n",
        "    import sys\n",
        "    if 'ipykernel' in sys.modules:\n",
        "        # Colab/Jupyter 환경일 경우, 여기서 모드를 직접 지정할 수 있습니다.\n",
        "        # 디버깅 시 'train_only'로 변경해서 사용하세요.\n",
        "        args = parser.parse_args(['--mode', 'predict'])\n",
        "    else:\n",
        "        # 커맨드 라인 환경일 경우, 기존 방식을 따릅니다.\n",
        "        args = parser.parse_args()\n",
        "\n",
        "    config = {\n",
        "        'batch_size': BATCH_SIZE, 'input_seq_len': INPUT_SEQUENCE_LENGTH,\n",
        "        'prediction_horizon': PREDICTION_HORIZON, 'num_bp_features': NUM_BP_FEATURES,\n",
        "        'lookback_days': PHASE_CORRECTION_LOOKBACK_DAYS, 'day_minutes': DAY_MINUTES,\n",
        "        'num_markers_to_keep': NUM_MARKERS_TO_KEEP, 'lambda_reg': LAMBDA_REG,\n",
        "        'lambda_cont': LAMBDA_CONT, 'lambda_anchor': LAMBDA_ANCHOR,\n",
        "        'lambda_boundary': LAMBDA_BOUNDARY, 'num_layers': NUM_LAYERS,\n",
        "        'd_model': D_MODEL, 'num_heads': NUM_HEADS, 'dff': DFF,\n",
        "        'rate': DROPOUT_RATE, 'epochs': EPOCHS, 'learning_rate': LEARNING_RATE,\n",
        "        'num_harmonics': NUM_FOURIER_HARMONICS, 'lstm_units': LSTM_UNITS,\n",
        "        'decoder_lstm_units': DECODER_LSTM_UNITS,\n",
        "    }\n",
        "\n",
        "    try:\n",
        "        # --- [수정된 부분 2] ---\n",
        "        # 'train_only' 모드에 대한 분기 처리\n",
        "        if args.mode == 'train':\n",
        "            print(\"\\n\" + \"=\"*70 + \"\\n  Training Mode: 전체 학습 파이프라인 실행\\n\" + \"=\"*70 + \"\\n\")\n",
        "            run_training_pipeline(config)\n",
        "        elif args.mode == 'train_only':\n",
        "            run_training_only(config)\n",
        "        elif args.mode == 'predict':\n",
        "            print(\"\\n\" + \"=\"*70 + \"\\n  Prediction Mode: 저장된 모델로 예측 실행\\n\" + \"=\"*70 + \"\\n\")\n",
        "            run_prediction_demo(config)\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"\\n치명적인 오류 발생: {e}\")\n",
        "        import traceback\n",
        "        traceback.print_exc()\n",
        "\n",
        "    print(\"\\n프로그램 실행이 완료되었습니다.\")"
      ],
      "metadata": {
        "id": "yahdXdpkxZwZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "26722b9d-0b96-4248-ef70-ab8d6e184c2d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "======================================================================\n",
            "  Prediction Mode: 저장된 모델로 예측 실행\n",
            "======================================================================\n",
            "\n",
            "\n",
            "--- 실시간 혈압 예측 데모 시작 ---\n",
            "모델 로드 완료.\n",
            "--- 다중 사용자 데이터 로딩 시작 (혈압 필수): /content/drive/MyDrive/biometric_data ---\n",
            "  - Person 1: 15840 레코드 로드 (혈압 데이터 포함)\n",
            "  - Person 2: 15840 레코드 로드 (혈압 데이터 포함)\n",
            "--- 총 2명의 데이터 통합 완료: 31680 레코드 ---\n",
            "\n",
            "테스트 정보: Person ID: 2, 예측 시점: 2025-07-10 23:59:00\n",
            "\n",
            "--- 미래 24시간 혈압 예측 시작 (시점: 2025-07-10 23:59:00) ---\n",
            "--- 혈압 예측 완료 ---\n",
            "--- 향상된 예측 결과 시각화 시작 ---\n",
            "향상된 예측 그래프 저장 완료: /content/drive/MyDrive/real_time_bp_prediction_output_v0.22.1/enhanced_bp_prediction.png\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x2200 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "프로그램 실행이 완료되었습니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2xDXVz20mN93"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}